
Format: HTML
max tokens
50000

All Extensions

Base path: root
±34618 tokens


Copy
The response has been limited to 50k tokens of the smallest files in the repo. You can remove this limitation by removing the max tokens filter.
├── .gitattributes
├── .gitignore
├── .vscode
    ├── launch.json
    └── tasks.json
├── 20230607131120_Initial-Create.zip
├── App.config
├── Form1.Designer.cs
├── Form1.cs
├── Form1.resx
├── Migrations
    ├── 20240122192408_InitialCreate.Designer.cs
    ├── 20240122192408_InitialCreate.cs
    └── DelightfulContextModelSnapshot.cs
├── Model
    ├── Attribute.cs
    ├── ControlObject.cs
    ├── DelightfulContext.cs
    ├── Inventory.cs
    ├── InventoryView.cs
    ├── Node.cs
    └── TreeNodeEntity.cs
├── MyTreeView.cs
├── Program.cs
├── Properties
    ├── DataSources
    │   └── dave3.Model.Inventory.datasource
    ├── Resources.Designer.cs
    ├── Resources.resx
    ├── Settings.Designer.cs
    └── Settings.settings
├── README.md
├── Services
    └── InventtoryRepository.cs
├── [MAKE_A_COPY]_Anthropic_API_Quickstart.ipynb
├── dave3.csproj
├── dave3.sln
└── dbcontextShtuff.txt


/.gitattributes:
--------------------------------------------------------------------------------
 1 | ###############################################################################
 2 | # Set default behavior to automatically normalize line endings.
 3 | ###############################################################################
 4 | * text=auto
 5 | 
 6 | ###############################################################################
 7 | # Set default behavior for command prompt diff.
 8 | #
 9 | # This is need for earlier builds of msysgit that does not have it on by
10 | # default for csharp files.
11 | # Note: This is only used by command line
12 | ###############################################################################
13 | #*.cs     diff=csharp
14 | 
15 | ###############################################################################
16 | # Set the merge driver for project and solution files
17 | #
18 | # Merging from the command prompt will add diff markers to the files if there
19 | # are conflicts (Merging from VS is not affected by the settings below, in VS
20 | # the diff markers are never inserted). Diff markers may cause the following 
21 | # file extensions to fail to load in VS. An alternative would be to treat
22 | # these files as binary and thus will always conflict and require user
23 | # intervention with every merge. To do so, just uncomment the entries below
24 | ###############################################################################
25 | #*.sln       merge=binary
26 | #*.csproj    merge=binary
27 | #*.vbproj    merge=binary
28 | #*.vcxproj   merge=binary
29 | #*.vcproj    merge=binary
30 | #*.dbproj    merge=binary
31 | #*.fsproj    merge=binary
32 | #*.lsproj    merge=binary
33 | #*.wixproj   merge=binary
34 | #*.modelproj merge=binary
35 | #*.sqlproj   merge=binary
36 | #*.wwaproj   merge=binary
37 | 
38 | ###############################################################################
39 | # behavior for image files
40 | #
41 | # image files are treated as binary by default.
42 | ###############################################################################
43 | #*.jpg   binary
44 | #*.png   binary
45 | #*.gif   binary
46 | 
47 | ###############################################################################
48 | # diff behavior for common document formats
49 | # 
50 | # Convert binary document formats to text before diffing them. This feature
51 | # is only available from the command line. Turn it on by uncommenting the 
52 | # entries below.
53 | ###############################################################################
54 | #*.doc   diff=astextplain
55 | #*.DOC   diff=astextplain
56 | #*.docx  diff=astextplain
57 | #*.DOCX  diff=astextplain
58 | #*.dot   diff=astextplain
59 | #*.DOT   diff=astextplain
60 | #*.pdf   diff=astextplain
61 | #*.PDF   diff=astextplain
62 | #*.rtf   diff=astextplain
63 | #*.RTF   diff=astextplain
64 | 


--------------------------------------------------------------------------------
/.gitignore:
--------------------------------------------------------------------------------
  1 | ## Ignore Visual Studio temporary files, build results, and
  2 | ## files generated by popular Visual Studio add-ons.
  3 | ##
  4 | ## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore
  5 | 
  6 | # User-specific files
  7 | *.rsuser
  8 | *.suo
  9 | *.user
 10 | *.userosscache
 11 | *.sln.docstates
 12 | 
 13 | # User-specific files (MonoDevelop/Xamarin Studio)
 14 | *.userprefs
 15 | 
 16 | # Mono auto generated files
 17 | mono_crash.*
 18 | 
 19 | # Build results
 20 | [Dd]ebug/
 21 | [Dd]ebugPublic/
 22 | [Rr]elease/
 23 | [Rr]eleases/
 24 | x64/
 25 | x86/
 26 | [Ww][Ii][Nn]32/
 27 | [Aa][Rr][Mm]/
 28 | [Aa][Rr][Mm]64/
 29 | bld/
 30 | [Bb]in/
 31 | [Oo]bj/
 32 | [Oo]ut/
 33 | [Ll]og/
 34 | [Ll]ogs/
 35 | 
 36 | # Visual Studio 2015/2017 cache/options directory
 37 | .vs/
 38 | # Uncomment if you have tasks that create the project's static files in wwwroot
 39 | #wwwroot/
 40 | 
 41 | # Visual Studio 2017 auto generated files
 42 | Generated\ Files/
 43 | 
 44 | # MSTest test Results
 45 | [Tt]est[Rr]esult*/
 46 | [Bb]uild[Ll]og.*
 47 | 
 48 | # NUnit
 49 | *.VisualState.xml
 50 | TestResult.xml
 51 | nunit-*.xml
 52 | 
 53 | # Build Results of an ATL Project
 54 | [Dd]ebugPS/
 55 | [Rr]eleasePS/
 56 | dlldata.c
 57 | 
 58 | # Benchmark Results
 59 | BenchmarkDotNet.Artifacts/
 60 | 
 61 | # .NET Core
 62 | project.lock.json
 63 | project.fragment.lock.json
 64 | artifacts/
 65 | 
 66 | # ASP.NET Scaffolding
 67 | ScaffoldingReadMe.txt
 68 | 
 69 | # StyleCop
 70 | StyleCopReport.xml
 71 | 
 72 | # Files built by Visual Studio
 73 | *_i.c
 74 | *_p.c
 75 | *_h.h
 76 | *.ilk
 77 | *.meta
 78 | *.obj
 79 | *.iobj
 80 | *.pch
 81 | *.pdb
 82 | *.ipdb
 83 | *.pgc
 84 | *.pgd
 85 | *.rsp
 86 | *.sbr
 87 | *.tlb
 88 | *.tli
 89 | *.tlh
 90 | *.tmp
 91 | *.tmp_proj
 92 | *_wpftmp.csproj
 93 | *.log
 94 | *.vspscc
 95 | *.vssscc
 96 | .builds
 97 | *.pidb
 98 | *.svclog
 99 | *.scc
100 | 
101 | # Chutzpah Test files
102 | _Chutzpah*
103 | 
104 | # Visual C++ cache files
105 | ipch/
106 | *.aps
107 | *.ncb
108 | *.opendb
109 | *.opensdf
110 | *.sdf
111 | *.cachefile
112 | *.VC.db
113 | *.VC.VC.opendb
114 | 
115 | # Visual Studio profiler
116 | *.psess
117 | *.vsp
118 | *.vspx
119 | *.sap
120 | 
121 | # Visual Studio Trace Files
122 | *.e2e
123 | 
124 | # TFS 2012 Local Workspace
125 | $tf/
126 | 
127 | # Guidance Automation Toolkit
128 | *.gpState
129 | 
130 | # ReSharper is a .NET coding add-in
131 | _ReSharper*/
132 | *.[Rr]e[Ss]harper
133 | *.DotSettings.user
134 | 
135 | # TeamCity is a build add-in
136 | _TeamCity*
137 | 
138 | # DotCover is a Code Coverage Tool
139 | *.dotCover
140 | 
141 | # AxoCover is a Code Coverage Tool
142 | .axoCover/*
143 | !.axoCover/settings.json
144 | 
145 | # Coverlet is a free, cross platform Code Coverage Tool
146 | coverage*.json
147 | coverage*.xml
148 | coverage*.info
149 | 
150 | # Visual Studio code coverage results
151 | *.coverage
152 | *.coveragexml
153 | 
154 | # NCrunch
155 | _NCrunch_*
156 | .*crunch*.local.xml
157 | nCrunchTemp_*
158 | 
159 | # MightyMoose
160 | *.mm.*
161 | AutoTest.Net/
162 | 
163 | # Web workbench (sass)
164 | .sass-cache/
165 | 
166 | # Installshield output folder
167 | [Ee]xpress/
168 | 
169 | # DocProject is a documentation generator add-in
170 | DocProject/buildhelp/
171 | DocProject/Help/*.HxT
172 | DocProject/Help/*.HxC
173 | DocProject/Help/*.hhc
174 | DocProject/Help/*.hhk
175 | DocProject/Help/*.hhp
176 | DocProject/Help/Html2
177 | DocProject/Help/html
178 | 
179 | # Click-Once directory
180 | publish/
181 | 
182 | # Publish Web Output
183 | *.[Pp]ublish.xml
184 | *.azurePubxml
185 | # Note: Comment the next line if you want to checkin your web deploy settings,
186 | # but database connection strings (with potential passwords) will be unencrypted
187 | *.pubxml
188 | *.publishproj
189 | 
190 | # Microsoft Azure Web App publish settings. Comment the next line if you want to
191 | # checkin your Azure Web App publish settings, but sensitive information contained
192 | # in these scripts will be unencrypted
193 | PublishScripts/
194 | 
195 | # NuGet Packages
196 | *.nupkg
197 | # NuGet Symbol Packages
198 | *.snupkg
199 | # The packages folder can be ignored because of Package Restore
200 | **/[Pp]ackages/*
201 | # except build/, which is used as an MSBuild target.
202 | !**/[Pp]ackages/build/
203 | # Uncomment if necessary however generally it will be regenerated when needed
204 | #!**/[Pp]ackages/repositories.config
205 | # NuGet v3's project.json files produces more ignorable files
206 | *.nuget.props
207 | *.nuget.targets
208 | 
209 | # Microsoft Azure Build Output
210 | csx/
211 | *.build.csdef
212 | 
213 | # Microsoft Azure Emulator
214 | ecf/
215 | rcf/
216 | 
217 | # Windows Store app package directories and files
218 | AppPackages/
219 | BundleArtifacts/
220 | Package.StoreAssociation.xml
221 | _pkginfo.txt
222 | *.appx
223 | *.appxbundle
224 | *.appxupload
225 | 
226 | # Visual Studio cache files
227 | # files ending in .cache can be ignored
228 | *.[Cc]ache
229 | # but keep track of directories ending in .cache
230 | !?*.[Cc]ache/
231 | 
232 | # Others
233 | ClientBin/
234 | ~$*
235 | *~
236 | *.dbmdl
237 | *.dbproj.schemaview
238 | *.jfm
239 | *.pfx
240 | *.publishsettings
241 | orleans.codegen.cs
242 | 
243 | # Including strong name files can present a security risk
244 | # (https://github.com/github/gitignore/pull/2483#issue-259490424)
245 | #*.snk
246 | 
247 | # Since there are multiple workflows, uncomment next line to ignore bower_components
248 | # (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
249 | #bower_components/
250 | 
251 | # RIA/Silverlight projects
252 | Generated_Code/
253 | 
254 | # Backup & report files from converting an old project file
255 | # to a newer Visual Studio version. Backup files are not needed,
256 | # because we have git ;-)
257 | _UpgradeReport_Files/
258 | Backup*/
259 | UpgradeLog*.XML
260 | UpgradeLog*.htm
261 | ServiceFabricBackup/
262 | *.rptproj.bak
263 | 
264 | # SQL Server files
265 | *.mdf
266 | *.ldf
267 | *.ndf
268 | 
269 | # Business Intelligence projects
270 | *.rdl.data
271 | *.bim.layout
272 | *.bim_*.settings
273 | *.rptproj.rsuser
274 | *- [Bb]ackup.rdl
275 | *- [Bb]ackup ([0-9]).rdl
276 | *- [Bb]ackup ([0-9][0-9]).rdl
277 | 
278 | # Microsoft Fakes
279 | FakesAssemblies/
280 | 
281 | # GhostDoc plugin setting file
282 | *.GhostDoc.xml
283 | 
284 | # Node.js Tools for Visual Studio
285 | .ntvs_analysis.dat
286 | node_modules/
287 | 
288 | # Visual Studio 6 build log
289 | *.plg
290 | 
291 | # Visual Studio 6 workspace options file
292 | *.opt
293 | 
294 | # Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
295 | *.vbw
296 | 
297 | # Visual Studio LightSwitch build output
298 | **/*.HTMLClient/GeneratedArtifacts
299 | **/*.DesktopClient/GeneratedArtifacts
300 | **/*.DesktopClient/ModelManifest.xml
301 | **/*.Server/GeneratedArtifacts
302 | **/*.Server/ModelManifest.xml
303 | _Pvt_Extensions
304 | 
305 | # Paket dependency manager
306 | .paket/paket.exe
307 | paket-files/
308 | 
309 | # FAKE - F# Make
310 | .fake/
311 | 
312 | # CodeRush personal settings
313 | .cr/personal
314 | 
315 | # Python Tools for Visual Studio (PTVS)
316 | __pycache__/
317 | *.pyc
318 | 
319 | # Cake - Uncomment if you are using it
320 | # tools/**
321 | # !tools/packages.config
322 | 
323 | # Tabs Studio
324 | *.tss
325 | 
326 | # Telerik's JustMock configuration file
327 | *.jmconfig
328 | 
329 | # BizTalk build output
330 | *.btp.cs
331 | *.btm.cs
332 | *.odx.cs
333 | *.xsd.cs
334 | 
335 | # OpenCover UI analysis results
336 | OpenCover/
337 | 
338 | # Azure Stream Analytics local run output
339 | ASALocalRun/
340 | 
341 | # MSBuild Binary and Structured Log
342 | *.binlog
343 | 
344 | # NVidia Nsight GPU debugger configuration file
345 | *.nvuser
346 | 
347 | # MFractors (Xamarin productivity tool) working folder
348 | .mfractor/
349 | 
350 | # Local History for Visual Studio
351 | .localhistory/
352 | 
353 | # BeatPulse healthcheck temp database
354 | healthchecksdb
355 | 
356 | # Backup folder for Package Reference Convert tool in Visual Studio 2017
357 | MigrationBackup/
358 | 
359 | # Ionide (cross platform F# VS Code tools) working folder
360 | .ionide/
361 | 
362 | # Fody - auto-generated XML schema
363 | FodyWeavers.xsd


--------------------------------------------------------------------------------
/.vscode/launch.json:
--------------------------------------------------------------------------------
 1 | {
 2 |     "version": "0.2.0",
 3 |     "configurations": [
 4 |         {
 5 |             // Use IntelliSense to find out which attributes exist for C# debugging
 6 |             // Use hover for the description of the existing attributes
 7 |             // For further information visit https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger-launchjson.md
 8 |             "name": ".NET Core Launch (console)",
 9 |             "type": "coreclr",
10 |             "request": "launch",
11 |             "preLaunchTask": "build",
12 |             // If you have changed target frameworks, make sure to update the program path.
13 |             "program": "${workspaceFolder}/bin/Debug/net7.0-windows/dave3.dll",
14 |             "args": [],
15 |             "cwd": "${workspaceFolder}",
16 |             // For more information about the 'console' field, see https://aka.ms/VSCode-CS-LaunchJson-Console
17 |             "console": "internalConsole",
18 |             "stopAtEntry": false
19 |         },
20 |         {
21 |             "name": ".NET Core Attach",
22 |             "type": "coreclr",
23 |             "request": "attach"
24 |         }
25 |     ]
26 | }


--------------------------------------------------------------------------------
/.vscode/tasks.json:
--------------------------------------------------------------------------------
 1 | {
 2 |     "version": "2.0.0",
 3 |     "tasks": [
 4 |         {
 5 |             "label": "build",
 6 |             "command": "dotnet",
 7 |             "type": "process",
 8 |             "args": [
 9 |                 "build",
10 |                 "${workspaceFolder}/dave3.csproj",
11 |                 "/property:GenerateFullPaths=true",
12 |                 "/consoleloggerparameters:NoSummary"
13 |             ],
14 |             "problemMatcher": "$msCompile"
15 |         },
16 |         {
17 |             "label": "publish",
18 |             "command": "dotnet",
19 |             "type": "process",
20 |             "args": [
21 |                 "publish",
22 |                 "${workspaceFolder}/dave3.csproj",
23 |                 "/property:GenerateFullPaths=true",
24 |                 "/consoleloggerparameters:NoSummary"
25 |             ],
26 |             "problemMatcher": "$msCompile"
27 |         },
28 |         {
29 |             "label": "watch",
30 |             "command": "dotnet",
31 |             "type": "process",
32 |             "args": [
33 |                 "watch",
34 |                 "run",
35 |                 "--project",
36 |                 "${workspaceFolder}/dave3.csproj"
37 |             ],
38 |             "problemMatcher": "$msCompile"
39 |         }
40 |     ]
41 | }


--------------------------------------------------------------------------------
/20230607131120_Initial-Create.zip:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/dchristal/dave3/c50b2140f156421a89b2ed7eab1f61aa8e293dd4/20230607131120_Initial-Create.zip


--------------------------------------------------------------------------------
/App.config:
--------------------------------------------------------------------------------
 1 | ﻿<?xml version="1.0" encoding="utf-8" ?>
 2 | <configuration>
 3 |     <configSections>
 4 |         <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
 5 |             <section name="dave3.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
 6 |         </sectionGroup>
 7 |     </configSections>
 8 |     <userSettings>
 9 |         <dave3.Properties.Settings>
10 |           </dave3.Properties.Settings>
11 |     </userSettings>
12 | 	<connectionStrings>
13 | 		<add name="DefaultConnection" 
14 | 		     connectionString="Server=192.168.1.205;Database=delightful;User Id=SA;Password=asdf;TrustServerCertificate=True" 
15 | 		     providerName="System.Data.SqlClient" />
16 | 	</connectionStrings>
17 | </configuration>


--------------------------------------------------------------------------------
/Form1.Designer.cs:
--------------------------------------------------------------------------------
  1 | ﻿namespace dave3;
  2 | 
  3 | partial class Form1
  4 | {
  5 |     /// <summary>
  6 |     ///  Required designer variable.
  7 |     /// </summary>
  8 |     private System.ComponentModel.IContainer components = null;
  9 |     /// <summary>
 10 |     ///  Clean up any resources being used.
 11 |     /// </summary>
 12 |     /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
 13 |     protected override void Dispose(bool disposing)
 14 |     {
 15 |         if (disposing && (components != null))
 16 |         {
 17 |             components.Dispose();
 18 |         }
 19 |         base.Dispose(disposing);
 20 |     }
 21 |     #region Windows Form Designer generated code
 22 |     /// <summary>
 23 |     ///  Required method for Designer support - do not modify
 24 |     ///  the contents of this method with the code editor.
 25 |     /// </summary>
 26 |     private void InitializeComponent()
 27 |     {
 28 |         components = new System.ComponentModel.Container();
 29 |         treeView1 = new MyTreeView();
 30 |         searchTreeView1 = new TextBox();
 31 |         inventoryDataGridView = new DataGridView();
 32 |         treeView2 = new MyTreeView();
 33 |         treeView3 = new MyTreeView();
 34 |         tv3Tag = new TextBox();
 35 |         tv2Tag = new CustomTextBox();
 36 |         tv1Tag = new TextBox();
 37 |         tvName1 = new TextBox();
 38 |         tvName2 = new TextBox();
 39 |         tvName3 = new TextBox();
 40 |         tvAncestry1 = new TextBox();
 41 |         tvAncestry2 = new TextBox();
 42 |         tvAncestry3 = new TextBox();
 43 |         tvFilter1 = new CheckBox();
 44 |         bindingSource1 = new BindingSource(components);
 45 |         tvFilter2 = new CheckBox();
 46 |         searchTreeView2 = new TextBox();
 47 |         tvFilter3 = new CheckBox();
 48 |         searchTreeView3 = new TextBox();
 49 |         AddNew = new Button();
 50 |         tvIncludeChildren1 = new CheckBox();
 51 |         tvIncludeChildren2 = new CheckBox();
 52 |         tvIncludeChildren3 = new CheckBox();
 53 |         SearchInventory = new TextBox();
 54 |         tvName2a = new TextBox();
 55 |         tv2aTag = new CustomTextBox();
 56 |         FilterStatus = new Button();
 57 |         ((System.ComponentModel.ISupportInitialize)inventoryDataGridView).BeginInit();
 58 |         ((System.ComponentModel.ISupportInitialize)bindingSource1).BeginInit();
 59 |         SuspendLayout();
 60 |         // 
 61 |         // treeView1
 62 |         // 
 63 |         treeView1.HideSelection = false;
 64 |         treeView1.Location = new Point(15, 57);
 65 |         treeView1.Name = "treeView1";
 66 |         treeView1.Size = new Size(303, 182);
 67 |         treeView1.TabIndex = 0;
 68 |         // 
 69 |         // searchTreeView1
 70 |         // 
 71 |         searchTreeView1.Location = new Point(15, 10);
 72 |         searchTreeView1.Name = "searchTreeView1";
 73 |         searchTreeView1.Size = new Size(207, 23);
 74 |         searchTreeView1.TabIndex = 1;
 75 |         searchTreeView1.TabStop = false;
 76 |         // 
 77 |         // inventoryDataGridView
 78 |         // 
 79 |         inventoryDataGridView.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
 80 |         inventoryDataGridView.Location = new Point(17, 377);
 81 |         inventoryDataGridView.Name = "inventoryDataGridView";
 82 |         inventoryDataGridView.RowTemplate.Height = 25;
 83 |         inventoryDataGridView.Size = new Size(1139, 342);
 84 |         inventoryDataGridView.TabIndex = 3;
 85 |         inventoryDataGridView.TabStop = false;
 86 |         inventoryDataGridView.CellClick += InventoryDataGridView_CellClick;
 87 |         inventoryDataGridView.DataError += InventoryDataGridView_DataError;
 88 |         // 
 89 |         // treeView2
 90 |         // 
 91 |         treeView2.HideSelection = false;
 92 |         treeView2.Location = new Point(324, 58);
 93 |         treeView2.Name = "treeView2";
 94 |         treeView2.Size = new Size(303, 182);
 95 |         treeView2.TabIndex = 1;
 96 |         // 
 97 |         // treeView3
 98 |         // 
 99 |         treeView3.HideSelection = false;
100 |         treeView3.Location = new Point(633, 57);
101 |         treeView3.Name = "treeView3";
102 |         treeView3.Size = new Size(303, 182);
103 |         treeView3.TabIndex = 2;
104 |         // 
105 |         // tv3Tag
106 |         // 
107 |         tv3Tag.Location = new Point(635, 264);
108 |         tv3Tag.Name = "tv3Tag";
109 |         tv3Tag.Size = new Size(100, 23);
110 |         tv3Tag.TabIndex = 22;
111 |         tv3Tag.TabStop = false;
112 |         // 
113 |         // tv2Tag
114 |         // 
115 |         tv2Tag.Location = new Point(326, 264);
116 |         tv2Tag.Name = "tv2Tag";
117 |         tv2Tag.Size = new Size(100, 23);
118 |         tv2Tag.TabIndex = 21;
119 |         tv2Tag.TabStop = false;
120 |         // 
121 |         // tv1Tag
122 |         // 
123 |         tv1Tag.Location = new Point(17, 264);
124 |         tv1Tag.Name = "tv1Tag";
125 |         tv1Tag.Size = new Size(100, 23);
126 |         tv1Tag.TabIndex = 20;
127 |         tv1Tag.TabStop = false;
128 |         // 
129 |         // tvName1
130 |         // 
131 |         tvName1.Location = new Point(122, 265);
132 |         tvName1.Name = "tvName1";
133 |         tvName1.Size = new Size(198, 23);
134 |         tvName1.TabIndex = 23;
135 |         tvName1.TabStop = false;
136 |         // 
137 |         // tvName2
138 |         // 
139 |         tvName2.Location = new Point(431, 264);
140 |         tvName2.Name = "tvName2";
141 |         tvName2.Size = new Size(198, 23);
142 |         tvName2.TabIndex = 24;
143 |         tvName2.TabStop = false;
144 |         // 
145 |         // tvName3
146 |         // 
147 |         tvName3.Location = new Point(741, 264);
148 |         tvName3.Name = "tvName3";
149 |         tvName3.Size = new Size(198, 23);
150 |         tvName3.TabIndex = 25;
151 |         tvName3.TabStop = false;
152 |         // 
153 |         // tvAncestry1
154 |         // 
155 |         tvAncestry1.Location = new Point(20, 294);
156 |         tvAncestry1.Name = "tvAncestry1";
157 |         tvAncestry1.Size = new Size(917, 23);
158 |         tvAncestry1.TabIndex = 26;
159 |         tvAncestry1.TabStop = false;
160 |         // 
161 |         // tvAncestry2
162 |         // 
163 |         tvAncestry2.Location = new Point(122, 323);
164 |         tvAncestry2.Name = "tvAncestry2";
165 |         tvAncestry2.Size = new Size(917, 23);
166 |         tvAncestry2.TabIndex = 27;
167 |         tvAncestry2.TabStop = false;
168 |         // 
169 |         // tvAncestry3
170 |         // 
171 |         tvAncestry3.Location = new Point(240, 352);
172 |         tvAncestry3.Name = "tvAncestry3";
173 |         tvAncestry3.Size = new Size(917, 23);
174 |         tvAncestry3.TabIndex = 28;
175 |         tvAncestry3.TabStop = false;
176 |         // 
177 |         // tvFilter1
178 |         // 
179 |         tvFilter1.AutoSize = true;
180 |         tvFilter1.Location = new Point(235, 10);
181 |         tvFilter1.Name = "tvFilter1";
182 |         tvFilter1.Size = new Size(52, 19);
183 |         tvFilter1.TabIndex = 29;
184 |         tvFilter1.TabStop = false;
185 |         tvFilter1.Text = "Filter";
186 |         tvFilter1.UseVisualStyleBackColor = true;
187 |         // 
188 |         // tvFilter2
189 |         // 
190 |         tvFilter2.AutoSize = true;
191 |         tvFilter2.Location = new Point(544, 12);
192 |         tvFilter2.Name = "tvFilter2";
193 |         tvFilter2.Size = new Size(52, 19);
194 |         tvFilter2.TabIndex = 31;
195 |         tvFilter2.TabStop = false;
196 |         tvFilter2.Text = "Filter";
197 |         tvFilter2.UseVisualStyleBackColor = true;
198 |         // 
199 |         // searchTreeView2
200 |         // 
201 |         searchTreeView2.Location = new Point(324, 8);
202 |         searchTreeView2.Name = "searchTreeView2";
203 |         searchTreeView2.Size = new Size(207, 23);
204 |         searchTreeView2.TabIndex = 30;
205 |         searchTreeView2.TabStop = false;
206 |         // 
207 |         // tvFilter3
208 |         // 
209 |         tvFilter3.AutoSize = true;
210 |         tvFilter3.Location = new Point(850, 12);
211 |         tvFilter3.Name = "tvFilter3";
212 |         tvFilter3.Size = new Size(52, 19);
213 |         tvFilter3.TabIndex = 33;
214 |         tvFilter3.TabStop = false;
215 |         tvFilter3.Text = "Filter";
216 |         tvFilter3.UseVisualStyleBackColor = true;
217 |         // 
218 |         // searchTreeView3
219 |         // 
220 |         searchTreeView3.Location = new Point(637, 10);
221 |         searchTreeView3.Name = "searchTreeView3";
222 |         searchTreeView3.Size = new Size(207, 23);
223 |         searchTreeView3.TabIndex = 32;
224 |         searchTreeView3.TabStop = false;
225 |         // 
226 |         // AddNew
227 |         // 
228 |         AddNew.Location = new Point(976, 62);
229 |         AddNew.Name = "AddNew";
230 |         AddNew.Size = new Size(75, 23);
231 |         AddNew.TabIndex = 34;
232 |         AddNew.Text = "+";
233 |         AddNew.UseVisualStyleBackColor = true;
234 |         AddNew.Click += AddNew_Click;
235 |         // 
236 |         // tvIncludeChildren1
237 |         // 
238 |         tvIncludeChildren1.AutoSize = true;
239 |         tvIncludeChildren1.Location = new Point(235, 35);
240 |         tvIncludeChildren1.Name = "tvIncludeChildren1";
241 |         tvIncludeChildren1.Size = new Size(93, 19);
242 |         tvIncludeChildren1.TabIndex = 35;
243 |         tvIncludeChildren1.TabStop = false;
244 |         tvIncludeChildren1.Text = "Incl Children";
245 |         tvIncludeChildren1.UseVisualStyleBackColor = true;
246 |         // 
247 |         // tvIncludeChildren2
248 |         // 
249 |         tvIncludeChildren2.AutoSize = true;
250 |         tvIncludeChildren2.Location = new Point(544, 33);
251 |         tvIncludeChildren2.Name = "tvIncludeChildren2";
252 |         tvIncludeChildren2.Size = new Size(93, 19);
253 |         tvIncludeChildren2.TabIndex = 36;
254 |         tvIncludeChildren2.TabStop = false;
255 |         tvIncludeChildren2.Text = "Incl Children";
256 |         tvIncludeChildren2.UseVisualStyleBackColor = true;
257 |         // 
258 |         // tvIncludeChildren3
259 |         // 
260 |         tvIncludeChildren3.AutoSize = true;
261 |         tvIncludeChildren3.Location = new Point(850, 33);
262 |         tvIncludeChildren3.Name = "tvIncludeChildren3";
263 |         tvIncludeChildren3.Size = new Size(93, 19);
264 |         tvIncludeChildren3.TabIndex = 37;
265 |         tvIncludeChildren3.TabStop = false;
266 |         tvIncludeChildren3.Text = "Incl Children";
267 |         tvIncludeChildren3.UseVisualStyleBackColor = true;
268 |         // 
269 |         // SearchInventory
270 |         // 
271 |         SearchInventory.Location = new Point(949, 8);
272 |         SearchInventory.Name = "SearchInventory";
273 |         SearchInventory.Size = new Size(207, 23);
274 |         SearchInventory.TabIndex = 38;
275 |         SearchInventory.TabStop = false;
276 |         SearchInventory.Leave += SearchInventory_Leave;
277 |         // 
278 |         // tvName2a
279 |         // 
280 |         tvName2a.Location = new Point(431, 235);
281 |         tvName2a.Name = "tvName2a";
282 |         tvName2a.Size = new Size(198, 23);
283 |         tvName2a.TabIndex = 41;
284 |         tvName2a.TabStop = false;
285 |         // 
286 |         // tv2aTag
287 |         // 
288 |         tv2aTag.Location = new Point(326, 235);
289 |         tv2aTag.Name = "tv2aTag";
290 |         tv2aTag.Size = new Size(100, 23);
291 |         tv2aTag.TabIndex = 40;
292 |         tv2aTag.TabStop = false;
293 |         // 
294 |         // FilterStatus
295 |         // 
296 |         FilterStatus.Location = new Point(976, 129);
297 |         FilterStatus.Name = "FilterStatus";
298 |         FilterStatus.Size = new Size(75, 23);
299 |         FilterStatus.TabIndex = 42;
300 |         FilterStatus.Text = "button1";
301 |         FilterStatus.UseVisualStyleBackColor = true;
302 |         FilterStatus.Click += FilterStatus_Click;
303 |         // 
304 |         // Form1
305 |         // 
306 |         AutoScaleDimensions = new SizeF(7F, 15F);
307 |         AutoScaleMode = AutoScaleMode.Font;
308 |         ClientSize = new Size(1178, 800);
309 |         Controls.Add(FilterStatus);
310 |         Controls.Add(tvName2a);
311 |         Controls.Add(tv2aTag);
312 |         Controls.Add(SearchInventory);
313 |         Controls.Add(tvIncludeChildren3);
314 |         Controls.Add(tvIncludeChildren2);
315 |         Controls.Add(tvIncludeChildren1);
316 |         Controls.Add(AddNew);
317 |         Controls.Add(tvFilter3);
318 |         Controls.Add(searchTreeView3);
319 |         Controls.Add(tvFilter2);
320 |         Controls.Add(searchTreeView2);
321 |         Controls.Add(tvFilter1);
322 |         Controls.Add(tvAncestry3);
323 |         Controls.Add(tvAncestry2);
324 |         Controls.Add(tvAncestry1);
325 |         Controls.Add(tvName3);
326 |         Controls.Add(tvName2);
327 |         Controls.Add(tvName1);
328 |         Controls.Add(tv3Tag);
329 |         Controls.Add(tv2Tag);
330 |         Controls.Add(tv1Tag);
331 |         Controls.Add(treeView3);
332 |         Controls.Add(treeView2);
333 |         Controls.Add(inventoryDataGridView);
334 |         Controls.Add(searchTreeView1);
335 |         Controls.Add(treeView1);
336 |         Name = "Form1";
337 |         Text = "Form1";
338 |         FormClosing += Form1_FormClosing;
339 |         Load += Form1_Load;
340 |         ((System.ComponentModel.ISupportInitialize)inventoryDataGridView).EndInit();
341 |         ((System.ComponentModel.ISupportInitialize)bindingSource1).EndInit();
342 |         ResumeLayout(false);
343 |         PerformLayout();
344 |     }
345 |     #endregion
346 |     private MyTreeView treeView1;
347 |     private TextBox searchTreeView1;
348 |     private DataGridView inventoryDataGridView;
349 |     private MyTreeView treeView2;
350 |     private MyTreeView treeView3;
351 |     private TextBox tv3Tag;
352 |     private CustomTextBox tv2Tag;
353 |     private TextBox tv1Tag;
354 |     private TextBox tvName1;
355 |     private TextBox tvName2;
356 |     private TextBox tvName3;
357 |     private TextBox tvAncestry1;
358 |     private TextBox tvAncestry2;
359 |     private TextBox tvAncestry3;
360 |     private CheckBox tvFilter1;
361 |     private BindingSource bindingSource1;
362 |     private CheckBox tvFilter2;
363 |     private TextBox searchTreeView2;
364 |     private CheckBox tvFilter3;
365 |     private TextBox searchTreeView3;
366 |     private Button AddNew;
367 |     private CheckBox tvIncludeChildren1;
368 |     private CheckBox tvIncludeChildren2;
369 |     private CheckBox tvIncludeChildren3;
370 |     private TextBox SearchInventory;
371 |     private TextBox tvName2a;
372 |     private CustomTextBox tv2aTag;
373 |     private Button FilterStatus;
374 | }
375 | 


--------------------------------------------------------------------------------
/Form1.cs:
--------------------------------------------------------------------------------
   1 | using dave3.Model;
   2 | using Equin.ApplicationFramework;
   3 | using Microsoft.Data.SqlClient;
   4 | using Microsoft.EntityFrameworkCore;
   5 | using System.Linq.Expressions;
   6 | using System.Text.RegularExpressions;
   7 | 
   8 | namespace dave3;
   9 | 
  10 | public partial class Form1 : Form
  11 | {
  12 |     // Define the dictionary at the class level
  13 | 
  14 |     //private bool _isDirty;
  15 | 
  16 |     //   private Control _lastFocusedControl;
  17 | 
  18 |     public Form1()
  19 |     {
  20 |         InitializeComponent();
  21 |         KeyPreview = true;
  22 |         Cnx = new DelightfulContext();
  23 |         LastFocusedTreeView = treeView1;
  24 |         var treeViews = new List<MyTreeView> { treeView1, treeView2, treeView3 };
  25 |         SetFormDimensions();
  26 |         BindFilterStatus();
  27 |         var contextMenu = SetupTreeViewContextMenu();
  28 |         SubscribeToEvents();
  29 | 
  30 | 
  31 |         foreach (var treeView in treeViews)
  32 |         {
  33 |             treeView.AllowDrop = true;
  34 |             treeView.LabelEdit = true;
  35 |             treeView.ItemDrag += TreeView_ItemDrag;
  36 |             treeView.DragEnter += TreeView_DragEnter;
  37 |             treeView.DragOver += TreeView_DragOver;
  38 |             treeView.DragDrop += TreeView_DragDrop;
  39 |             treeView.AfterSelect += TreeView_AfterSelect;
  40 |             treeView.KeyDown += TreeView_KeyDown;
  41 |             treeView.BeforeLabelEdit += TreeView_BeforeLabelEdit;
  42 | 
  43 |             treeView.AfterLabelEdit += TreeView_AfterLabelEdit;
  44 |             treeView.ContextMenuStrip = contextMenu;
  45 |             treeView.GotFocus += TreeView_GotFocus;
  46 |             treeView.NodeMouseClick += TreeView_NodeMouseClick;
  47 | 
  48 |             BindTreeView(treeView);
  49 |             //  treeView.MouseDown += treeView_MouseDown;
  50 |             //treeView.SelectedNode.EnsureVisible();  
  51 |         }
  52 | 
  53 |         BuildInventoryDataGridView();
  54 | 
  55 |         void SetFormDimensions()
  56 |         {
  57 |             Width = Cnx.ControlObjects.Find("Form1Width").ControlInt ?? 800;
  58 |             Height = Cnx.ControlObjects.Find("Form1Height").ControlInt ?? 600;
  59 |         }
  60 | 
  61 |         void BindFilterStatus()
  62 |         {
  63 |             var filterObject = new FilterClass { FilterStat = true };
  64 | 
  65 |             // Set the data source of the binding source to the object
  66 |             var bs = new BindingSource
  67 |             {
  68 |                 DataSource = filterObject
  69 |             };
  70 | 
  71 |             // Bind the Enabled property of the button to the boolean property of the object
  72 |             FilterStatus.DataBindings.Add("Enabled", bs, "FilterStat", false, DataSourceUpdateMode.OnPropertyChanged);
  73 |             UpdateButtonState(filterObject.FilterStat);
  74 |         }
  75 | 
  76 |         ContextMenuStrip SetupTreeViewContextMenu()
  77 |         {
  78 |             var contextMenu = new ContextMenuStrip();
  79 |             var moveUpItem = new ToolStripMenuItem("Move Up");
  80 |             var moveDownItem = new ToolStripMenuItem("Move Down");
  81 |             contextMenu.Items.AddRange(new ToolStripItem[] { moveUpItem, moveDownItem });
  82 |             LastFocusedTreeView.GotFocus += TreeView_GotFocus;
  83 |             moveUpItem.Click += (_, _) => MoveNode(-1);
  84 |             moveDownItem.Click += (_, _) => MoveNode(1);
  85 |             return contextMenu;
  86 |         }
  87 | 
  88 |         void SubscribeToEvents()
  89 |         {
  90 |             LastFocusedTreeView.GotFocus += TreeView_GotFocus;
  91 |             tvFilter1.CheckedChanged += TvFilter_CheckedChanged;
  92 |             tvFilter2.CheckedChanged += TvFilter_CheckedChanged;
  93 |             tvFilter3.CheckedChanged += TvFilter_CheckedChanged;
  94 |             tvIncludeChildren1.CheckedChanged += TvFilter_CheckedChanged;
  95 |             tvIncludeChildren2.CheckedChanged += TvFilter_CheckedChanged;
  96 |             tvIncludeChildren3.CheckedChanged += TvFilter_CheckedChanged;
  97 |             searchTreeView1.TextChanged += SearchTreeView_TextChanged;
  98 |             searchTreeView2.TextChanged += SearchTreeView_TextChanged;
  99 |             searchTreeView3.TextChanged += SearchTreeView_TextChanged;
 100 |             inventoryDataGridView.DefaultValuesNeeded += SetDefaultValues;
 101 |         }
 102 | 
 103 |         void SetDefaultValues(object sender, DataGridViewRowEventArgs e)
 104 |         {
 105 |             e.Row.Cells[0].Value = tv1Tag.Text;
 106 |             e.Row.Cells[1].Value = tv2Tag.Text;
 107 |             e.Row.Cells[2].Value = tv3Tag.Text;
 108 |             e.Row.Cells["ProductName"].Value = tvName1.Text;
 109 |             e.Row.Cells["LocationName"].Value = tvName2.Text;
 110 |             e.Row.Cells["CategoryName"].Value = tvName3.Text;
 111 |             e.Row.Cells["LastUpdate"].Value = DateTime.Now;
 112 |             e.Row.Cells["Quantity"].Value = 1;
 113 |         }
 114 |     }
 115 | 
 116 |     public DelightfulContext Cnx { get; }
 117 | 
 118 |     public Dictionary<string, string> ColumnToIdColumnMap { get; } = new()
 119 |     {
 120 |         { "ProductName", "ProductId" },
 121 |         { "LocationName", "LocationId" }
 122 |         // Add more mappings if needed
 123 |     };
 124 | 
 125 |     public Dictionary<TreeNode, TreeNodeEntity> TreeNodeEntityMapping { get; } = [];
 126 | 
 127 |     public bool EnableEdit { get; set; } = true;
 128 |     public bool Filtering { get; set; }
 129 | 
 130 |     public BindingListView<Inventory> InventoryBindingListView { get; set; }
 131 | 
 132 |     public int PreviousRowIndex { get; set; }
 133 | 
 134 |     public TreeView LastFocusedTreeView { get; set; }
 135 | 
 136 |     public bool IsDirty { get; set; }
 137 | 
 138 |     public bool IsDeletingRow { get; set; }
 139 | 
 140 |     private void TreeView_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
 141 |     {
 142 |         _ = e.Node;
 143 |         var treeView = (MyTreeView)sender;
 144 |         var treeId = treeView!.Name[^1];
 145 |         var searchTreeView = Controls["SearchTreeView" + treeId];
 146 |         if (searchTreeView.Text.Length > 0)
 147 |         {
 148 |             searchTreeView.Text = "";
 149 |             UpdateTreeViewFilteringState();
 150 |         }
 151 |         else
 152 |         {
 153 |             FilterInventoryByTreeView();
 154 |         }
 155 |         // Execute the code you want here.
 156 |     }
 157 |     /*
 158 |         private int previousRowIndex;
 159 |     */
 160 | 
 161 |     private void UpdateButtonState(bool isEnabled)
 162 |     {
 163 |         if (isEnabled)
 164 |         {
 165 |             FilterStatus.Text = "Filter";
 166 |             FilterStatus.Tag = false;
 167 |         }
 168 |         // FilterStatus.BackColor = Color.Aquamarine;
 169 |         else
 170 |             FilterStatus.Text = "Update";
 171 |         // FilterStatus.BackColor = Color.Pink;
 172 |         FilterStatus.Tag = isEnabled; // Store the state in the Tag property
 173 |     }
 174 | 
 175 |     private void FilterStatus_Click(object sender, EventArgs e)
 176 |     {
 177 |         // Get the current state from the Tag property
 178 |         var currentState = (bool)FilterStatus.Tag;
 179 | 
 180 |         // Toggle the state
 181 |         var newState = !currentState;
 182 | 
 183 |         // Update the Tag property based on the Text property
 184 |         FilterStatus.Tag = (FilterStatus.Text != "update") && newState;
 185 | 
 186 |         // Update the button
 187 |         UpdateButtonState(newState);
 188 |     }
 189 | 
 190 |     private void SearchTreeView_TextChanged(object sender, EventArgs e)
 191 |     {
 192 |         var sb = sender as TextBox;
 193 |         var focusedControl = ActiveControl;
 194 |         var searchTreeView = Convert.ToInt32(MyRegex2().Match(sb!.Name).Value);
 195 |         CheckBox tvFilter = null;
 196 | 
 197 |         switch (searchTreeView)
 198 |         {
 199 |             case 1:
 200 |                 LastFocusedTreeView = treeView1;
 201 |                 tvFilter = tvFilter1;
 202 |                 break;
 203 | 
 204 |             case 2:
 205 |                 LastFocusedTreeView = treeView2;
 206 |                 tvFilter = tvFilter2;
 207 |                 break;
 208 |             case 3:
 209 |                 LastFocusedTreeView = treeView3;
 210 |                 tvFilter = tvFilter3;
 211 |                 break;
 212 |         }
 213 | 
 214 |         if (sb.Text.Length > 0)
 215 |             // No need to check here if the checkbox is already checked
 216 |             //tvFilter.Checked = true;
 217 |             FindAndSelectNode(sb.Text);
 218 |         else
 219 |             tvFilter.Checked = false;
 220 | 
 221 |         // Restore the focus
 222 |         focusedControl.Focus();
 223 |     }
 224 | 
 225 |     private void TreeView_BeforeLabelEdit(object sender, NodeLabelEditEventArgs e)
 226 |     {
 227 |         // Cancel the label edit action, without canceling the editing of other nodes.
 228 |         // e.CancelEdit = true; //!_enableEdit;
 229 |     }
 230 | 
 231 |     private void InventoryDataGridView_DefaultValuesNeeded(object sender, DataGridViewRowEventArgs e)
 232 |     {
 233 |         e.Row.Cells["LastUpdate"].Value = DateTime.Now;
 234 |     }
 235 | 
 236 | 
 237 |     private static TreeNode FindNodeByProductId(TreeNodeCollection nodes, int productId)
 238 |     {
 239 |         foreach (TreeNode node in nodes)
 240 |         {
 241 |             if (node != null && ((TreeNodeTagData)node.Tag).Id == productId) return node;
 242 | 
 243 |             if (node != null)
 244 |             {
 245 |                 var result = FindNodeByProductId(node.Nodes, productId);
 246 |                 if (result != null) return result;
 247 |             }
 248 |         }
 249 | 
 250 |         return null;
 251 |     }
 252 | 
 253 |   
 254 | 
 255 |     private void InventoryDataGridView_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
 256 |     {
 257 |         var dataGridView = (DataGridView)sender;
 258 |         var row = dataGridView.Rows[e.RowIndex];
 259 | 
 260 |         if (row.IsNewRow) IsDirty = true;
 261 |     }
 262 | 
 263 |     private void InventoryDataGridView_KeyDown(object sender, KeyEventArgs e)
 264 |     {
 265 |         if (e.KeyCode == Keys.Delete)
 266 |         {
 267 |             foreach (DataGridViewRow row in inventoryDataGridView.SelectedRows)
 268 |             {
 269 |                 var inventoryView = (ObjectView<Inventory>)row.DataBoundItem;
 270 |                 var inventory = inventoryView.Object;
 271 |                 if (inventoryView.Object.InventoryId != 0)
 272 |                     Cnx.Inventories.Remove(inventory);
 273 |             }
 274 | 
 275 |             Cnx.SaveChanges();
 276 |             FilterInventoryByTreeView();
 277 |         }
 278 |         else if (e.Control && e.KeyCode == Keys.OemQuotes) // Check if Ctrl+' is pressed
 279 |         {
 280 |             var currentCell = inventoryDataGridView.CurrentCell;
 281 |             if (currentCell != null && currentCell.RowIndex > 0) // Check if it's not the first row
 282 |             {
 283 |                 var cellAbove = inventoryDataGridView[currentCell.ColumnIndex, currentCell.RowIndex - 1];
 284 |                 currentCell.Value = cellAbove.Value;
 285 | 
 286 |                 // Check if the current column is in the dictionary
 287 |                 if (ColumnToIdColumnMap.TryGetValue(currentCell.OwningColumn.Name, out var idColumnName))
 288 |                 {
 289 |                     var idColumnIndex = inventoryDataGridView.Columns[idColumnName].Index;
 290 | 
 291 |                     // Get the cell above in the ID column
 292 |                     cellAbove = inventoryDataGridView[idColumnIndex, currentCell.RowIndex - 1];
 293 | 
 294 |                     // Update the current cell in the ID column
 295 |                     inventoryDataGridView[idColumnIndex, currentCell.RowIndex].Value = cellAbove.Value;
 296 |                 }
 297 | 
 298 |                 e.Handled = true; // Mark the event as handled
 299 |                 try
 300 |                 {
 301 |                     inventoryDataGridView.EndEdit();
 302 |                     Cnx.SaveChanges();
 303 |                 }
 304 |                 catch (DbUpdateException ex) when (ex.InnerException is SqlException { Number: 2601 } ||
 305 |                                                    ex.InnerException is SqlException { Number: 2627 })
 306 |                 {
 307 |                     // Handle the duplicate key error
 308 |                     MessageBox.Show("Cannot insert duplicate item: " + ex.InnerException.Message, "Error",
 309 |                         MessageBoxButtons.OK, MessageBoxIcon.Error);
 310 |                 }
 311 |             }
 312 |         }
 313 |     }
 314 | 
 315 |     private void InventoryDataGridView_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
 316 |     {
 317 |         var validValues = new[] { 1, 2, 3 };
 318 |         if (validValues.Contains(inventoryDataGridView.Columns[e.ColumnIndex].DisplayIndex))
 319 |         {
 320 |             var rows = inventoryDataGridView.Rows;
 321 |             var controlObject = Cnx.ControlObjects.FirstOrDefault(co => co.Name == "AutoBulkUpdateMax");
 322 |             var updateMax = controlObject?.ControlInt;
 323 |             var proceed = rows.Count < updateMax;
 324 |             if (!proceed)
 325 |             {
 326 |                 var result = MessageBox.Show("Do you really want to modify all " + rows + "?",
 327 |                     "Confirmation", MessageBoxButtons.YesNo);
 328 |                 proceed = result == DialogResult.Yes;
 329 |             }
 330 | 
 331 |             if (proceed)
 332 |             {
 333 |                 foreach (DataGridViewRow r in inventoryDataGridView.Rows)
 334 |                     switch (inventoryDataGridView.Columns[e.ColumnIndex].DisplayIndex)
 335 |                     {
 336 |                         case 1:
 337 |                             r.Cells[0].Value = tv1Tag.Text;
 338 |                             r.Cells["ProductName"].Value = tvName1.Text;
 339 |                             break;
 340 |                         case 2:
 341 |                             r.Cells[1].Value = tv2Tag.Text;
 342 |                             r.Cells["LocationName"].Value = tvName2.Text;
 343 |                             break;
 344 |                         case 3:
 345 |                             r.Cells[2].Value = tv3Tag.Text;
 346 |                             r.Cells["CategoryName"].Value = tvName3.Text;
 347 |                             break;
 348 |                     } // value is 1, 2, or 3
 349 | 
 350 |                 Cnx.SaveChanges();
 351 |             }
 352 |         }
 353 |     }
 354 | 
 355 | 
 356 |     private void BuildInventoryDataGridView()
 357 |     {
 358 |         inventoryDataGridView.Leave += InventoryDataGridView_Leave;
 359 |         inventoryDataGridView.RowLeave += InventoryDataGridView_RowLeave;
 360 |         inventoryDataGridView.RowValidated += InventoryDataGridView_RowValidated;
 361 |         inventoryDataGridView.CellBeginEdit += InventoryDataGridView_CellBeginEdit;
 362 |         inventoryDataGridView.KeyDown += InventoryDataGridView_KeyDown;
 363 |         inventoryDataGridView.CellEnter += InventoryDataGridView_CellEnter;
 364 |         inventoryDataGridView.ColumnHeaderMouseClick += InventoryDataGridView_ColumnHeaderMouseClick;
 365 | 
 366 | 
 367 |         // Load Inventory entities from the database into memory
 368 |         Cnx.Inventories.Load();
 369 | 
 370 | 
 371 |         foreach (var item in Cnx.Inventories)
 372 |         {
 373 |             item.ProductName = Cnx.TreeNodeEntities.Find(item.ProductId)?.Name!;
 374 |             item.LocationName = Cnx.TreeNodeEntities.Find(item.LocationId)?.Name!;
 375 |             item.CategoryName = Cnx.TreeNodeEntities.Find(item.CategoryId)?.Name!;
 376 |         }
 377 | 
 378 | 
 379 |         // Populate [NotMapped] Inventory properties
 380 | 
 381 | 
 382 |         // Set the DataSource of the BindingSource to the local entities
 383 |         var inv = Cnx.Inventories.ToList();
 384 |         InventoryBindingListView = new BindingListView<Inventory>(inv);
 385 |         bindingSource1.DataSource = InventoryBindingListView;
 386 | 
 387 |         // Set the DataSource of the DataGridView to the BindingSource
 388 |         inventoryDataGridView.DataSource = bindingSource1;
 389 | 
 390 | 
 391 |         // Configure column headers, widths, and display order
 392 |         var smallWidth = 30;
 393 |         inventoryDataGridView.Columns["ProductId"]!.Width = 20;
 394 |         inventoryDataGridView.Columns["ProductName"]!.Width = 100;
 395 |         inventoryDataGridView.Columns["LocationName"]!.Width = 100;
 396 |         inventoryDataGridView.Columns["LocationId"]!.Width = 100; //.Visible = false; //.Width = 100;
 397 |         inventoryDataGridView.Columns["LastUpdate"]!.Width = 70;
 398 |         inventoryDataGridView.Columns["Description"]!.Width = Cnx.ControlObjects.Find("DescWidth").ControlInt ?? 150;
 399 |         ; //Description
 400 |         inventoryDataGridView.Columns["Quantity"]!.Width = smallWidth; //qty
 401 |         inventoryDataGridView.Columns["Material"]!.Width = 80;
 402 |         inventoryDataGridView.Columns["Diameter"]!.Width = smallWidth;
 403 |         inventoryDataGridView.Columns["Length"]!.Width = smallWidth;
 404 |         inventoryDataGridView.Columns["Width"]!.Width = smallWidth;
 405 |         inventoryDataGridView.Columns["Height"]!.Width = smallWidth;
 406 |         inventoryDataGridView.Columns["Weight"]!.Width = smallWidth;
 407 |         inventoryDataGridView.Columns["Pitch"]!.Width = smallWidth;
 408 |         inventoryDataGridView.Columns["Volts"]!.Width = smallWidth;
 409 |         inventoryDataGridView.Columns["Amps"]!.Width = smallWidth;
 410 |         inventoryDataGridView.Columns["Watts"]!.Width = smallWidth;
 411 |         inventoryDataGridView.Columns["UoM"]!.Width = 40;
 412 |         inventoryDataGridView.Columns["Notes"]!.Width = 240;
 413 | 
 414 |         inventoryDataGridView.Columns["LastUpdate"].DefaultCellStyle.Format = "MM/dd/yyyy";
 415 | 
 416 |         inventoryDataGridView.Columns["ProductId"].DisplayIndex = 0;
 417 |         inventoryDataGridView.Columns["ProductName"].DisplayIndex = 1;
 418 |         inventoryDataGridView.Columns["LocationName"].DisplayIndex = 2;
 419 |         inventoryDataGridView.Columns["LocationId"].DisplayIndex = 3;
 420 |         inventoryDataGridView.Columns["LastUpdate"].DisplayIndex = 4;
 421 |         inventoryDataGridView.Columns["Description"].DisplayIndex = 5;
 422 |         inventoryDataGridView.Columns["Quantity"].DisplayIndex = 6;
 423 |         inventoryDataGridView.Columns["Material"].DisplayIndex = 7;
 424 |         inventoryDataGridView.Columns["Diameter"].DisplayIndex = 8;
 425 |         inventoryDataGridView.Columns["Length"].DisplayIndex = 9;
 426 |         inventoryDataGridView.Columns["Width"].DisplayIndex = 10;
 427 |         inventoryDataGridView.Columns["Height"].DisplayIndex = 11;
 428 |         inventoryDataGridView.Columns["Weight"].DisplayIndex = 12;
 429 |         inventoryDataGridView.Columns["Pitch"].DisplayIndex = 13;
 430 |         inventoryDataGridView.Columns["Volts"].DisplayIndex = 14;
 431 |         inventoryDataGridView.Columns["Amps"].DisplayIndex = 15;
 432 |         inventoryDataGridView.Columns["Watts"].DisplayIndex = 16;
 433 | 
 434 | 
 435 |         inventoryDataGridView.Columns["Quantity"].HeaderText = @"Qty";
 436 |         inventoryDataGridView.Columns["ProductId"].HeaderText = @"ID";
 437 |         inventoryDataGridView.Columns["ProductName"].HeaderText = @"Name";
 438 |         inventoryDataGridView.Columns["LocationName"].HeaderText = @"Loc";
 439 |         inventoryDataGridView.Columns["CategoryName"].HeaderText = @"Cat";
 440 |         inventoryDataGridView.Columns["LastUpdate"].HeaderText = @"Last";
 441 |         inventoryDataGridView.Columns["Description"].HeaderText = @"Desc";
 442 |         //inventoryDataGridView.Columns["Material"].HeaderText = "Mat";
 443 |         inventoryDataGridView.Columns["Length"].HeaderText = @"L";
 444 |         inventoryDataGridView.Columns["Diameter"].HeaderText = @"D";
 445 |         inventoryDataGridView.Columns["Width"].HeaderText = @"W";
 446 |         inventoryDataGridView.Columns["Height"].HeaderText = @"H";
 447 |         inventoryDataGridView.Columns["Weight"].HeaderText = @"Wt";
 448 |         inventoryDataGridView.Columns["Pitch"].HeaderText = @"P";
 449 |         inventoryDataGridView.Columns["Volts"].HeaderText = @"V";
 450 |         inventoryDataGridView.Columns["Amps"].HeaderText = @"A";
 451 |         inventoryDataGridView.Columns["Watts"].HeaderText = @"W";
 452 | 
 453 |         //inventoryDataGridView.Columns["PRODUCTID"]!.Visible = false;
 454 |         //inventoryDataGridView.Columns["LocationId"]!.Visible = false;
 455 |         inventoryDataGridView.Columns["CATEGORYID"]!.Visible = false;
 456 |         inventoryDataGridView.Columns["InventoryId"]!.Visible = false;
 457 |     }
 458 | 
 459 | 
 460 |     private void InventoryDataGridView_CellEnter(object sender, DataGridViewCellEventArgs e)
 461 |     {
 462 |         //var lf = _lastFocusedControl;
 463 |         var tvTag = tv2Tag.Text;
 464 |         var tvName = tvName2.Text;
 465 |         var currentCell = inventoryDataGridView.CurrentCell;
 466 | 
 467 |         if (currentCell.RowIndex > 0)
 468 |             if (currentCell != null) // Check if it's not the first row
 469 |                 if (currentCell.OwningColumn.Name == "LocationName")
 470 |                 {
 471 |                     // Update the current cell and the Location cell based on the selected node in treeView2
 472 |                     currentCell.Value = tvName;
 473 | 
 474 |                     var locationColumnIndex = inventoryDataGridView.Columns["LocationId"].Index;
 475 |                     inventoryDataGridView[locationColumnIndex, currentCell.RowIndex].Value = tvTag;
 476 |                     return;
 477 |                 }
 478 |         //  if (!_filtering)
 479 | 
 480 |         var row = inventoryDataGridView.Rows[e.RowIndex];
 481 |         var tn = Cnx.TreeNodeEntities.Find(row.Cells["ProductId"].Value);
 482 |         tvAncestry1.Text = Ancestry(tn);
 483 |         SelectNode(treeView1, tvAncestry1.Text);
 484 |         tn = Cnx.TreeNodeEntities.Find(row.Cells["LocationId"].Value);
 485 |         tvAncestry2.Text = Ancestry(tn);
 486 |         SelectNode(treeView2, tvAncestry2.Text);
 487 |         tn = Cnx.TreeNodeEntities.Find(row.Cells["CategoryId"].Value);
 488 |         tvAncestry3.Text = Ancestry(tn);
 489 |         SelectNode(treeView3, tvAncestry3.Text);
 490 |         Filtering = false;
 491 |     }
 492 | 
 493 |     private void InventoryDataGridView_RowValidated(object sender, DataGridViewCellEventArgs e)
 494 |     {
 495 |         var dataGridView = (DataGridView)sender;
 496 |         if (e.RowIndex >= dataGridView.Rows.Count) return;
 497 |         var row = dataGridView.Rows[e.RowIndex];
 498 |         //var inventoryN = (Inventory)row.DataBoundItem;
 499 |         // Check if the Inventory object is being tracked by the DbContext
 500 |         //var isTracked = _cnx.ChangeTracker.Entries<Inventory>().Any(entry => entry.Entity == inventoryN);
 501 | 
 502 |         // Check if it's a new row
 503 |         if (row.IsNewRow)
 504 |             // Set the LastUpdate to the current time
 505 |             row.Cells["LastUpdate"].Value = DateTime.Now;
 506 |         // The row is a new row that the user has just finished entering data for.
 507 |         // A new Inventory object has been created and added to the binding source.
 508 |         // You can retrieve this object using the DataBoundItem property of the row.
 509 |         var dbi = "";
 510 |         try
 511 |         {
 512 |             var objectView = (ObjectView<Inventory>)row.DataBoundItem;
 513 |             dbi = objectView.Object.LocationName; // Assuming LocationName is a property of Inventory
 514 |         }
 515 |         catch (Exception ex)
 516 |         {
 517 |             Console.WriteLine(ex.Message);
 518 |         }
 519 | 
 520 | 
 521 |         if (dbi != "")
 522 |         {
 523 |             var objectView = (ObjectView<Inventory>)row.DataBoundItem;
 524 | 
 525 |             if (objectView != null && objectView.Object.InventoryId == 0)
 526 | 
 527 |             {
 528 |                 var inventory = objectView.Object;
 529 | 
 530 |                 // Now you can add the new Inventory object to the DbContext.
 531 | 
 532 |                 try
 533 |                 {
 534 |                     Cnx.Inventories.Add(inventory);
 535 |                     Cnx.SaveChanges();
 536 |                 }
 537 |                 catch (Exception ex)
 538 |                 {
 539 |                     // Log or display the error message
 540 |                     Console.WriteLine(ex.Message);
 541 |                 }
 542 |             }
 543 |         }
 544 |         //var validationResults = new List<ValidationResult>();
 545 |         //var validationContext = new ValidationContext(inventory); // Assuming 'inventory' is the entity you want to validate
 546 | 
 547 |         //if (!Validator.TryValidateObject(inventory, validationContext, validationResults, true))
 548 |         //{
 549 |         //    foreach (var validationResult in validationResults)
 550 |         //    {
 551 |         //        Log or display validationResult.ErrorMessage
 552 |         //        Console.WriteLine(validationResult.ErrorMessage);
 553 |         //    }
 554 |         //}
 555 | 
 556 |         Cnx.SaveChanges();
 557 |     }
 558 | 
 559 | 
 560 |     private void InventoryDataGridView_RowLeave(object sender, DataGridViewCellEventArgs e)
 561 |     {
 562 |         if (inventoryDataGridView.CurrentRow != null) PreviousRowIndex = inventoryDataGridView.CurrentRow.Index;
 563 |         //Cnx.Entry((object)inventoryDataGridView.CurrentRow.DataBoundItem).State = EntityState.Modified;
 564 |         inventoryDataGridView.EndEdit();
 565 |         Cnx.SaveChanges();
 566 |         PreviousRowIndex = e.RowIndex;
 567 |     }
 568 | 
 569 | 
 570 |     private void BindTreeView(TreeView tree)
 571 |     {
 572 |         var treeId = Convert.ToInt32(MyRegex().Replace(tree.Name, ""));
 573 | 
 574 |         // Clear the existing nodes
 575 |         tree.Nodes.Clear();
 576 |         // Load data from the database into the local context
 577 |         Cnx.TreeNodeEntities.Load();
 578 |         // Get the root nodes (i.e., nodes with no parent) and order them
 579 |         var rootNodes = Cnx.TreeNodeEntities.Local
 580 |             .Where(entity => entity.ParentId == null && entity.TreeId == treeId)
 581 |             .OrderBy(entity => entity.Order); // Add this line to sort by Order
 582 | 
 583 |         // Add the root nodes to the TreeView
 584 |         foreach (var rootNode in rootNodes)
 585 |         {
 586 |             var treeNode = new TreeNode(rootNode.Name);
 587 |             var tagData = new TreeNodeTagData
 588 |             {
 589 |                 TreeNodeEntity = rootNode,
 590 |                 Id = rootNode.Id
 591 |             };
 592 |             treeNode.Tag = tagData;
 593 |             tree.Nodes.Add(treeNode);
 594 | 
 595 |             // Add the TreeNode and its corresponding entity to the dictionary
 596 |             TreeNodeEntityMapping[treeNode] = rootNode;
 597 | 
 598 |             // Add child nodes
 599 |             AddChildNodes(treeNode);
 600 |         }
 601 |     }
 602 | 
 603 |     private void InventoryDataGridView_Leave(object sender, EventArgs e)
 604 |     //private void InventoryDataGridView_Leave(object o, EventArgs e)
 605 |     {
 606 |         bindingSource1.EndEdit();
 607 |         //if (inventoryDataGridView.CurrentRow != null) _previousRowIndex = inventoryDataGridView.CurrentRow.Index;
 608 |         Cnx.SaveChanges();
 609 |     }
 610 | 
 611 |     private void AddChildNodes(TreeNode parentTreeNode)
 612 |     {
 613 |         var parentEntity = (TreeNodeTagData)parentTreeNode.Tag;
 614 | 
 615 |         var childEntities = Cnx.TreeNodeEntities.Local
 616 |             .Where(entity => entity.ParentId == parentEntity.Id)
 617 |             .OrderBy(entity => entity.Order); // Add this line to sort by Order
 618 | 
 619 |         foreach (var childEntity in childEntities)
 620 |         {
 621 |             var childTreeNode = new TreeNode(childEntity.Name);
 622 |             var childTagData = new TreeNodeTagData
 623 |             {
 624 |                 Id = childEntity.Id
 625 |             };
 626 |             childTreeNode.Tag = childTagData; // Store the TreeNodeTagData in the Tag property for later use
 627 |             parentTreeNode.Nodes.Add(childTreeNode);
 628 | 
 629 |             // Add the TreeNode and its corresponding entity to the dictionary
 630 |             TreeNodeEntityMapping[childTreeNode] = childEntity;
 631 | 
 632 |             // Recursively add grandchild nodes
 633 |             AddChildNodes(childTreeNode);
 634 |         }
 635 |     }
 636 | 
 637 |     private void UpdateProductNamesInInventory(int productId, string newName)
 638 |     {
 639 |         foreach (DataGridViewRow row in inventoryDataGridView.Rows)
 640 |             if (row.DataBoundItem is Inventory inventoryItem && inventoryItem.ProductId == productId)
 641 |                 inventoryItem.ProductName = newName;
 642 | 
 643 |         inventoryDataGridView.Refresh();
 644 |     }
 645 | 
 646 |     private void TreeView_DragOver(object sender, DragEventArgs e)
 647 |     {
 648 |         // Retrieve the client coordinates of the mouse position.  
 649 |         var targetPoint = LastFocusedTreeView.PointToClient(new Point(e.X, e.Y));
 650 | 
 651 |         // Select the node at the mouse position.  
 652 |         LastFocusedTreeView.SelectedNode = LastFocusedTreeView.GetNodeAt(targetPoint);
 653 |     }
 654 | 
 655 |     private void TreeView_AfterSelect(object sender, TreeViewEventArgs e)
 656 |     {
 657 |         //if checkbox true and filter true
 658 |         // Wrapping the code in a try-catch block to handle any runtime exceptions
 659 |         try
 660 |         {
 661 |             var treeId = Convert.ToInt32(MyRegex().Replace(LastFocusedTreeView.Name, ""));
 662 |             var treeView = (MyTreeView)sender;
 663 |             var node = LastFocusedTreeView.SelectedNode;
 664 |             var ancestry = Ancestry(node);
 665 |             var tagData = (TreeNodeTagData)node.Tag;
 666 | 
 667 |             if (tagData != null)
 668 |             {
 669 |                 // Extracting the Id from the tag data
 670 |                 var nTag = tagData.Id;
 671 | 
 672 |                 // Depending on the treeId, different actions are performed
 673 |                 switch (treeId)
 674 |                 {
 675 |                     case 1:
 676 |                         // Setting some text boxes and potentially a row in a DataGridView based on the selected node
 677 |                         // The specifics of this will depend on the context of your program
 678 |                         // Similar actions are done in cases 2 and 3, but with different text boxes and potentially different DataGridView cells
 679 |                         // The DataGridView row updates seem to only happen if a row is selected and some condition regarding FilterStatus.Tag is not met
 680 |                         tvName1.Text = LastFocusedTreeView.SelectedNode.Text;
 681 |                         tv1Tag.Text = nTag.ToString();
 682 |                         tvAncestry1.Text = ancestry;
 683 |                         if (inventoryDataGridView.CurrentRow != null && (bool)FilterStatus.Tag)
 684 |                         {
 685 |                             var row = inventoryDataGridView.CurrentRow;
 686 |                             row.Cells["ProductName"].Value = tvName1.Text;
 687 |                             row.Cells["ProductId"].Value = tv1Tag.Text;
 688 |                         }
 689 | 
 690 |                         break;
 691 |                     case 2:
 692 |                         // Similar to case 1
 693 |                         tvName2.Text = LastFocusedTreeView.SelectedNode.Text;
 694 |                         tv2Tag.Text = nTag.ToString();
 695 |                         tvAncestry2.Text = ancestry;
 696 |                         if (inventoryDataGridView.CurrentRow != null && (bool)FilterStatus.Tag)
 697 |                         {
 698 |                             var row = inventoryDataGridView.CurrentRow;
 699 |                             row.Cells["LocationName"].Value = tvName2.Text;
 700 |                             row.Cells["LocationId"].Value = tv2Tag.Text;
 701 |                             UpdateButtonState(true);
 702 |                         }
 703 | 
 704 |                         break;
 705 |                     case 3:
 706 |                         // Similar to case 1
 707 |                         tvName3.Text = LastFocusedTreeView.SelectedNode.Text;
 708 |                         tv3Tag.Text = nTag.ToString();
 709 |                         tvAncestry3.Text = ancestry;
 710 |                         if (inventoryDataGridView.CurrentRow != null && (bool)FilterStatus.Tag)
 711 |                         {
 712 |                             var row = inventoryDataGridView.CurrentRow;
 713 |                             row.Cells["CategoryName"].Value = tvName3.Text;
 714 |                             row.Cells["CategoryId"].Value = tv3Tag.Text;
 715 |                         }
 716 | 
 717 |                         break;
 718 |                 }
 719 |             }
 720 | 
 721 |             // If the DataGridView has a currently selected row and its index matches _previousRowIndex, 
 722 |             // the selected row's cells are updated based on the selected node of the TreeView corresponding to the treeId,
 723 |             // and then the database is updated to reflect these changes
 724 |             // The specifics of this will depend on the context of your program
 725 |             if (inventoryDataGridView.CurrentRow != null && inventoryDataGridView.CurrentRow.Index == PreviousRowIndex)
 726 |                 if (inventoryDataGridView.CurrentRow.DataBoundItem is Inventory inventory)
 727 |                 {
 728 |                     switch (treeId)
 729 |                     {
 730 |                         case 1:
 731 |                             inventoryDataGridView.CurrentRow.Cells["ProductName"].Value =
 732 |                                 LastFocusedTreeView.SelectedNode.Text;
 733 |                             inventoryDataGridView.CurrentRow.Cells["ProductId"].Value = tv1Tag.Text;
 734 |                             inventory.ProductId = Convert.ToInt32(tv1Tag.Text);
 735 |                             break;
 736 |                         case 2:
 737 |                             inventoryDataGridView.CurrentRow.Cells["LocationName"].Value =
 738 |                                 LastFocusedTreeView.SelectedNode.Text;
 739 |                             inventoryDataGridView.CurrentRow.Cells["LocationId"].Value = tv2Tag.Text;
 740 |                             inventory.LocationId = Convert.ToInt32(tv2Tag.Text);
 741 |                             break;
 742 |                         case 3:
 743 |                             inventoryDataGridView.CurrentRow.Cells["CategoryName"].Value =
 744 |                                 LastFocusedTreeView.SelectedNode.Text;
 745 |                             inventoryDataGridView.CurrentRow.Cells["CategoryId"].Value = tv3Tag.Text;
 746 |                             inventory.CategoryId = Convert.ToInt32(tv3Tag.Text);
 747 |                             break;
 748 |                     }
 749 | 
 750 |                     Cnx.Entry((object)inventory).State = EntityState.Modified;
 751 |                     Cnx.SaveChanges();
 752 |                 }
 753 |         }
 754 |         catch (Exception)
 755 |         {
 756 |             // Any exceptions are caught and potentially displayed to the user
 757 |             // The actual displaying is currently commented out
 758 |             // MessageBox.Show(ex.Message);
 759 |         }
 760 |     }
 761 | 
 762 |     private static string Ancestry(TreeNode node)
 763 |     {
 764 |         if (node != null)
 765 |         {
 766 |             var ancestry = node.Text;
 767 | 
 768 |             while (node.Parent != null)
 769 |             {
 770 |                 node = node.Parent;
 771 |                 ancestry = node.Text + "/" + ancestry;
 772 |             }
 773 | 
 774 |             return ancestry;
 775 |         }
 776 | 
 777 |         return "";
 778 |     }
 779 | 
 780 |     private static string Ancestry(TreeNodeEntity entity)
 781 |     {
 782 |         if (entity != null)
 783 |         {
 784 |             var ancestry = entity.Name;
 785 | 
 786 |             while (entity.Parent != null)
 787 |             {
 788 |                 entity = entity.Parent;
 789 |                 ancestry = entity.Name + "/" + ancestry;
 790 |             }
 791 | 
 792 |             return ancestry;
 793 |         }
 794 | 
 795 |         return "";
 796 |     }
 797 | 
 798 | 
 799 |     //private bool ContainsNode(TreeNode node1, TreeNode node2)
 800 |     //{
 801 |     //    // Check the parent node of the second node.  
 802 |     //    if (node2.Parent == null) return false;
 803 |     //    if (node2.Parent.Equals(node1)) return true;
 804 | 
 805 |     //    // If the parent node is not null or equal to the first node,   
 806 |     //    // call the ContainsNode method recursively using the parent of   
 807 |     //    // the second node.  
 808 |     //    return ContainsNode(node1, node2.Parent);
 809 |     //}
 810 | 
 811 |     private void TreeView_GotFocus(object sender, EventArgs e)
 812 |     {
 813 |         LastFocusedTreeView = sender as TreeView ?? treeView1;
 814 |     }
 815 | 
 816 |     private void TreeView_ItemDrag(object sender, ItemDragEventArgs e)
 817 |     {
 818 |         if (e.Item != null) DoDragDrop(e.Item, DragDropEffects.Move);
 819 |     }
 820 | 
 821 |     private static void TreeView_DragEnter(object sender, DragEventArgs e)
 822 |     {
 823 |         e.Effect = DragDropEffects.Move;
 824 |     }
 825 | 
 826 |     private void TreeView_DragDrop(object sender, DragEventArgs e)
 827 |     {
 828 |         if (e.Data != null && e.Data.GetData(typeof(TreeNode)) is TreeNode movingNode)
 829 |         {
 830 |             var targetPoint = LastFocusedTreeView.PointToClient(new Point(e.X, e.Y));
 831 |             var targetNode = LastFocusedTreeView.GetNodeAt(targetPoint);
 832 | 
 833 |             // Remove the node from its current position
 834 |             movingNode.Remove();
 835 | 
 836 |             // Insert the node at the new location
 837 |             if (targetNode == null)
 838 |                 // The node is dropped on the background, add it to the root
 839 |                 LastFocusedTreeView.Nodes.Add(movingNode);
 840 |             else
 841 |                 // The node is dropped on another node, make it a child of that node
 842 |                 targetNode.Nodes.Add(movingNode);
 843 | 
 844 |             // Get the TreeNodeEntity corresponding to the moved TreeNode
 845 |             var movingEntity = TreeNodeEntityMapping[movingNode];
 846 | 
 847 |             // Modify the parent of the moved entity based on where the TreeNode was moved in the TreeView
 848 |             if (targetNode == null)
 849 |             {
 850 |                 movingEntity.ParentId = null; // Or whatever signifies a root node in your model
 851 |             }
 852 |             else
 853 |             {
 854 |                 var parentEntity = TreeNodeEntityMapping[targetNode];
 855 |                 movingEntity.ParentId = parentEntity.Id;
 856 |             }
 857 | 
 858 |             // Save changes to the DbContext
 859 |             Cnx.SaveChanges();
 860 |         }
 861 |     }
 862 | 
 863 |     private void TreeView_KeyDown(object sender, KeyEventArgs e)
 864 |     {
 865 |         if (e.KeyCode == Keys.F2)
 866 |         {
 867 |             // Start editing the selected node when the F2 key is pressed
 868 |             // e.CancelEdit = false;
 869 |             if (LastFocusedTreeView.SelectedNode == null) return;
 870 |             //LastFocusedTreeView.CancelEdit = false;
 871 |             EnableEdit = true;
 872 |             LastFocusedTreeView.SelectedNode.BeginEdit();
 873 |         }
 874 |         else if (e.KeyCode == Keys.Insert)
 875 |         {
 876 |             // Insert a new node as a child of the selected node when the Insert key is pressed
 877 |             // (or as a root node if no node is selected)
 878 |             // (or do nothing if the TreeView has no nodes)
 879 |             // handle tagData on insert
 880 |             var treeId = Convert.ToInt32(MyRegex().Replace(LastFocusedTreeView.Name, ""));
 881 |             if (LastFocusedTreeView.SelectedNode != null)
 882 |             {
 883 |                 var newNode = new TreeNode("New node");
 884 |                 LastFocusedTreeView.SelectedNode.Nodes.Add(newNode);
 885 | 
 886 |                 // Create a new entity and add it to the context
 887 |                 var parentEntity = TreeNodeEntityMapping[LastFocusedTreeView.SelectedNode];
 888 | 
 889 |                 // Get the highest Order value of the existing child entities
 890 |                 var maxOrder = Cnx.TreeNodeEntities.Local
 891 |                     .Where(entity => entity.ParentId == parentEntity.Id)
 892 |                     .Max(entity => (int?)entity.Order) ?? 0;
 893 | 
 894 |                 var newEntity = new TreeNodeEntity
 895 |                 {
 896 |                     Name = newNode.Text,
 897 |                     ParentId = parentEntity.Id,
 898 |                     TreeId = treeId,
 899 |                     Order = maxOrder +
 900 |                             1 // Set the Order property to be one greater than the highest existing Order value
 901 |                     // Set other properties as necessary
 902 |                 };
 903 |                 Cnx.TreeNodeEntities.Add(newEntity);
 904 | 
 905 |                 // Add the new node and its corresponding entity to the dictionary
 906 |                 TreeNodeEntityMapping[newNode] = newEntity;
 907 | 
 908 |                 // Save changes to the database
 909 |                 LastFocusedTreeView.SelectedNode = newNode;
 910 |                 LastFocusedTreeView.SelectedNode.EnsureVisible();
 911 |                 if (LastFocusedTreeView.SelectedNode == null)
 912 |                 {
 913 |                 }
 914 |                 else
 915 |                 {
 916 |                     LastFocusedTreeView.SelectedNode.BeginEdit();
 917 |                 }
 918 | 
 919 |                 Cnx.SaveChanges();
 920 |             }
 921 |         }
 922 | 
 923 |         else if (e.KeyCode == Keys.Delete)
 924 |         {
 925 |             // Store a reference to the selected node before deleting it
 926 |             var selectedNode = LastFocusedTreeView.SelectedNode;
 927 |             if (selectedNode != null)
 928 |             {
 929 |                 // Show a confirmation dialog before deleting
 930 |                 var result = MessageBox.Show(@"Are you sure you want to delete this node?", @"Confirm Delete",
 931 |                     MessageBoxButtons.YesNo);
 932 |                 if (result == DialogResult.Yes)
 933 |                 {
 934 |                     // Remove the node from the TreeView
 935 |                     selectedNode.Remove();
 936 | 
 937 |                     // Remove the corresponding entity from the context
 938 |                     var entity = TreeNodeEntityMapping[selectedNode];
 939 |                     Cnx.TreeNodeEntities.Remove(entity);
 940 | 
 941 |                     // Remove the node and its corresponding entity from the dictionary
 942 |                     TreeNodeEntityMapping.Remove(selectedNode);
 943 | 
 944 |                     // Save changes to the database
 945 |                     Cnx.SaveChanges();
 946 |                 }
 947 |             }
 948 |         }
 949 |     }
 950 | 
 951 |     public static void SelectNode(TreeView treeView, string path)
 952 |     {
 953 |         treeView.CollapseAll();
 954 |         var names = path.Split('/');
 955 |         var nodes = treeView.Nodes;
 956 |         TreeNode node = null;
 957 | 
 958 |         foreach (var name in names)
 959 |         {
 960 |             node = FindNode(nodes, name);
 961 |             if (node == null)
 962 |                 return; // Node not found
 963 |             nodes = node.Nodes;
 964 |         }
 965 | 
 966 |         if (node != null)
 967 |         {
 968 |             treeView.SelectedNode = node;
 969 |             // node.Expand();
 970 |             treeView.SelectedNode.EnsureVisible();
 971 |         }
 972 |     }
 973 | 
 974 |     private static TreeNode FindNode(TreeNodeCollection nodes, string name)
 975 |     {
 976 |         foreach (TreeNode node in nodes)
 977 |             if (node.Text == name)
 978 |                 return node;
 979 |         return null; // Node not found
 980 |     }
 981 | 
 982 |     private void TreeView_AfterLabelEdit(object sender, NodeLabelEditEventArgs e)
 983 |     {
 984 |         // Update the entity when a node's text is edited
 985 |         if (e.Node != null && e.Label != null)
 986 |         {
 987 |             var entity = TreeNodeEntityMapping[e.Node];
 988 |             entity.Name = e.Label;
 989 |             var tagData = new TreeNodeTagData
 990 |             {
 991 |                 Id = entity.Id
 992 |             };
 993 |             e.Node.Tag = tagData;
 994 |             // Save changes to the database
 995 |             Cnx.SaveChanges();
 996 |             // Now update the DataGridView
 997 |             UpdateProductNamesInInventory(entity.Id, e.Label);
 998 |         }
 999 | 
1000 |         EnableEdit = false;
1001 |     }
1002 | 
1003 |     private void MoveNode(int direction)
1004 |     {
1005 |         var selectedNode = LastFocusedTreeView.SelectedNode;
1006 |         if (selectedNode == null)
1007 |             return;
1008 | 
1009 |         TreeNodeCollection parentNodes;
1010 |         if (selectedNode.Parent == null)
1011 |             parentNodes = LastFocusedTreeView.Nodes; // Root level node
1012 |         else
1013 |             parentNodes = selectedNode.Parent.Nodes; // Child node
1014 | 
1015 |         var index = parentNodes.IndexOf(selectedNode);
1016 |         if (index + direction < 0 || index + direction >= parentNodes.Count)
1017 |             return;
1018 | 
1019 |         // Swap the Order properties of the selected node and the node in the direction
1020 |         var selectedEntity = TreeNodeEntityMapping[selectedNode];
1021 |         var otherEntity = TreeNodeEntityMapping[parentNodes[index + direction]];
1022 |         if (selectedEntity.Order == otherEntity.Order)
1023 |             switch (direction)
1024 |             {
1025 |                 case 1:
1026 |                     otherEntity.Order++;
1027 |                     break;
1028 |                 case -1:
1029 |                     selectedEntity.Order++;
1030 |                     break;
1031 |             }
1032 | 
1033 |         (selectedEntity.Order, otherEntity.Order) = (otherEntity.Order, selectedEntity.Order);
1034 | 
1035 |         // Save changes to the database
1036 |         Cnx.SaveChanges();
1037 | 
1038 |         // Move the node in the TreeView
1039 |         parentNodes.RemoveAt(index);
1040 |         parentNodes.Insert(index + direction, selectedNode);
1041 | 
1042 |         LastFocusedTreeView.SelectedNode = selectedNode;
1043 |     }
1044 | 
1045 |     private void FindAndSelectNode(string searchTerm)
1046 |     {
1047 |         foreach (TreeNode node in LastFocusedTreeView.Nodes)
1048 |             if (FindAndSelectNode(node, searchTerm))
1049 |                 return;
1050 |     }
1051 | 
1052 |     private bool FindAndSelectNode(TreeNode node, string searchTerm)
1053 |     {
1054 |         if (node.Text.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
1055 | 
1056 |         {
1057 |             LastFocusedTreeView.SelectedNode = node;
1058 |             node.Expand();
1059 |             LastFocusedTreeView.Focus();
1060 |             return true;
1061 |         }
1062 | 
1063 |         foreach (TreeNode child in node.Nodes)
1064 |             if (FindAndSelectNode(child, searchTerm))
1065 |                 return true;
1066 | 
1067 |         return false;
1068 |     }
1069 | 
1070 |     public void AddOrUpdateControlObject(string name, string myString, int? myInt, float? myFloat)
1071 |     {
1072 |         // Get the existing ControlObject with the specified name
1073 |         var controlObject = Cnx.ControlObjects.FirstOrDefault(co => co.Name == name);
1074 | 
1075 |         if (controlObject == null)
1076 |         {
1077 |             // If the ControlObject doesn't exist, create a new one
1078 |             controlObject = new ControlObject
1079 |             {
1080 |                 Name = name,
1081 |                 ControlString = myString,
1082 |                 ControlInt = myInt,
1083 |                 ControlFloat = myFloat
1084 |             };
1085 | 
1086 |             // Add the new ControlObject to the DbSet
1087 |             Cnx.ControlObjects.Add(controlObject);
1088 |         }
1089 |         else
1090 |         {
1091 |             // If the ControlObject does exist, update its properties
1092 |             controlObject.ControlString = myString;
1093 |             controlObject.ControlInt = myInt;
1094 |             controlObject.ControlFloat = myFloat;
1095 |         }
1096 | 
1097 |         // Save changes to the database
1098 |         Cnx.SaveChanges();
1099 |     }
1100 | 
1101 |     private void Form1_FormClosing(object sender, FormClosingEventArgs e)
1102 |     {
1103 |         AddOrUpdateControlObject("nodePath1", treeView1.SelectedNode.FullPath, null, null);
1104 |         AddOrUpdateControlObject("nodePath2", treeView2.SelectedNode.FullPath, null, null);
1105 |         AddOrUpdateControlObject("nodePath3", treeView3.SelectedNode.FullPath, null, null);
1106 |         treeView1.Focus();
1107 |         try
1108 |         {
1109 |             Cnx.SaveChanges();
1110 |         }
1111 |         catch (Exception exception)
1112 |         {
1113 |             Console.WriteLine(exception);
1114 |             throw;
1115 |         }
1116 | 
1117 |         UpdateControlObject("Form1Width", Width);
1118 |         UpdateControlObject("Form1Height", Height);
1119 |         UpdateControlObject("DescWidth", inventoryDataGridView.Columns[4].Width);
1120 |     }
1121 | 
1122 |     public void UpdateControlObject(string key, object value)
1123 |     {
1124 |         var controlObject = Cnx.ControlObjects.Find(key);
1125 |         if (controlObject != null)
1126 |         {
1127 |             switch (value)
1128 |             {
1129 |                 case int intValue:
1130 |                     controlObject.ControlInt = intValue;
1131 |                     break;
1132 |                 case float floatValue:
1133 |                     controlObject.ControlFloat = floatValue;
1134 |                     break;
1135 |                 case string stringValue:
1136 |                     controlObject.ControlString = stringValue;
1137 |                     break;
1138 |                 default:
1139 |                     throw new ArgumentException("Unsupported value type.");
1140 |             }
1141 | 
1142 |             Cnx.ControlObjects.Update(controlObject);
1143 |             Cnx.SaveChanges();
1144 |         }
1145 |     }
1146 | 
1147 | 
1148 |     private void Form1_Load(object sender, EventArgs e)
1149 |     {
1150 |         try
1151 |         {
1152 |             var selectedNodePath1 = Cnx.ControlObjects.FirstOrDefault(co => co.Name == "nodePath1")?.ControlString;
1153 |             if (selectedNodePath1 != null)
1154 |             {
1155 |                 var pathParts1 = selectedNodePath1.Split('\\');
1156 |                 var node1 = FindNodeByPath(treeView1.Nodes, pathParts1, 0);
1157 |                 treeView1.SelectedNode = node1;
1158 |             }
1159 | 
1160 |             var selectedNodePath2 = Cnx.ControlObjects.FirstOrDefault(co => co.Name == "nodePath2")?.ControlString;
1161 |             if (selectedNodePath2 != null)
1162 |             {
1163 |                 var pathParts2 = selectedNodePath2.Split('\\');
1164 |                 var node2 = FindNodeByPath(treeView2.Nodes, pathParts2, 0);
1165 |                 treeView2.SelectedNode = node2;
1166 |                 ExpandParentNodes(node2);
1167 | 
1168 |                 var ancestry = Ancestry(node2);
1169 |                 tvAncestry2.Text = ancestry;
1170 |                 tvName2.Text = node2?.Text;
1171 |                 if (node2 != null) tv2Tag.Text = ((TreeNodeTagData)node2.Tag).Id.ToString();
1172 |             }
1173 | 
1174 |             var selectedNodePath3 = Cnx.ControlObjects.FirstOrDefault(co => co.Name == "nodePath3")?.ControlString;
1175 | 
1176 |             if (selectedNodePath3 != null)
1177 |             {
1178 |                 var pathParts3 = selectedNodePath3.Split('\\');
1179 |                 var node3 = FindNodeByPath(treeView3.Nodes, pathParts3, 0);
1180 |                 ExpandParentNodes(node3);
1181 |                 treeView3.SelectedNode = node3;
1182 |                 if (node3 != null)
1183 |                 {
1184 |                     var ancestry = Ancestry(node3);
1185 |                     tvAncestry3.Text = ancestry;
1186 |                     tvName3.Text = node3.Text;
1187 |                     tv3Tag.Text = ((TreeNodeTagData)node3.Tag).Id.ToString();
1188 |                 }
1189 |             }
1190 |         }
1191 | 
1192 |         catch (Exception ex2)
1193 |         {
1194 |             MessageBox.Show(ex2.Message);
1195 |         }
1196 | 
1197 |         //   AddNewRecord();
1198 |     }
1199 | 
1200 |     private static void ExpandParentNodes(TreeNode node)
1201 |     {
1202 |         if (node == null)
1203 |             return;
1204 | 
1205 |         if (node.Parent != null)
1206 |         {
1207 |             node.Parent.Expand();
1208 |             ExpandParentNodes(node.Parent);
1209 |         }
1210 |     }
1211 | 
1212 |     private static TreeNode FindNodeByPath(TreeNodeCollection nodes, string[] pathParts, int index)
1213 |     {
1214 |         foreach (TreeNode node in nodes)
1215 |             if (node != null && node.Text == pathParts[index])
1216 |             {
1217 |                 if (index == pathParts.Length - 1)
1218 |                     // This is the node we're looking for
1219 |                     return node;
1220 | 
1221 |                 // We need to search the child nodes
1222 |                 var childNode = FindNodeByPath(node.Nodes, pathParts, index + 1);
1223 |                 if (childNode != null)
1224 |                     // We found the node in the child nodes
1225 |                     return childNode;
1226 |             }
1227 | 
1228 |         // We didn't find the node
1229 |         return null;
1230 |     }
1231 | 
1232 |     private void UpdateTreeViewFilteringState()
1233 |     {
1234 |         Filtering = true;
1235 |         bindingSource1.EndEdit();
1236 |         Cnx.SaveChanges();
1237 | 
1238 |         tvIncludeChildren1.Enabled = tvFilter1.Checked;
1239 |         if (!tvFilter1.Checked) tvIncludeChildren1.Checked = false;
1240 | 
1241 |         tvIncludeChildren2.Enabled = tvFilter2.Checked;
1242 |         if (!tvFilter2.Checked) tvIncludeChildren2.Checked = false;
1243 | 
1244 |         tvIncludeChildren3.Enabled = tvFilter3.Checked;
1245 |         if (!tvFilter3.Checked) tvIncludeChildren3.Checked = false;
1246 | 
1247 |         FilterInventoryByTreeView();
1248 |         inventoryDataGridView.Refresh();
1249 |     }
1250 | 
1251 |     private void TvFilter_CheckedChanged(object sender, EventArgs e)
1252 |     {
1253 |         var focusedControl = ActiveControl;
1254 |         SearchInventory.Clear();
1255 |         var treeId = focusedControl!.Name[^1];
1256 |         var textbox = Controls["searchTreeView" + treeId] as TextBox;
1257 |         var checkbox = Controls["tvFilter" + treeId] as CheckBox;
1258 | 
1259 |         if (!checkbox.Checked && checkbox == focusedControl) textbox!.Clear();
1260 | 
1261 |         UpdateTreeViewFilteringState();
1262 |     }
1263 | 
1264 |     private Expression<Func<Inventory, bool>> GetFilterCondition(int id, bool includeChildren,
1265 |         Func<Inventory, int> propertySelector)
1266 |     {
1267 |         if (includeChildren)
1268 |         {
1269 |             var childIds = GetAllChildIds(treeView2.SelectedNode);
1270 |             childIds.Add(id); // Include the Id of the selected node itself
1271 | 
1272 |             return i => childIds.Contains(propertySelector(i));
1273 |         }
1274 | 
1275 |         return i => propertySelector(i) == id;
1276 |     }
1277 | 
1278 | 
1279 |     private static HashSet<int> ApplyFilter(TreeView treeView, CheckBox filterCheckBox,
1280 |         CheckBox includeChildrenCheckBox)
1281 |     {
1282 |         var ids = new HashSet<int>();
1283 | 
1284 |         if (filterCheckBox.Checked)
1285 |         {
1286 |             var tagData = (TreeNodeTagData)treeView.SelectedNode.Tag;
1287 |             var id = tagData.Id;
1288 | 
1289 |             // Add the ID of the selected node itself
1290 |             ids.Add(id);
1291 | 
1292 |             if (includeChildrenCheckBox.Checked)
1293 |             {
1294 |                 // Add the IDs of all child nodes
1295 |                 var childIds = GetAllChildIds(treeView.SelectedNode);
1296 |                 ids.UnionWith(childIds);
1297 |             }
1298 |         }
1299 | 
1300 |         return ids;
1301 |     }
1302 | 
1303 |     private void FilterInventoryByText()
1304 |     {
1305 |         tvIncludeChildren1.Checked = false;
1306 |         tvIncludeChildren2.Checked = false;
1307 |         tvIncludeChildren3.Checked = false;
1308 |         tvFilter1.Checked = false;
1309 |         tvFilter2.Checked = false;
1310 |         tvFilter3.Checked = false;
1311 | 
1312 | 
1313 |         var searchedDescriptionsNotes = ApplyFilter(SearchInventory.Text);
1314 |         //  var bindingListView = new BindingListView<Inventory>(_cnx.Inventories.Local.ToList());
1315 | 
1316 |         if (searchedDescriptionsNotes.Count == 0)
1317 |         {
1318 |             InventoryBindingListView.RemoveFilter();
1319 |             UpdateButtonState(true);
1320 |         }
1321 |         else
1322 |         {
1323 |             InventoryBindingListView.ApplyFilter(i => searchedDescriptionsNotes.Contains(i.InventoryId))
1324 |                 ;
1325 |             UpdateButtonState(false);
1326 |         }
1327 | 
1328 |         //bindingSource1.DataSource = _inventoryBindingListView;
1329 |         //inventoryDataGridView.DataSource = bindingSource1;
1330 |         inventoryDataGridView.Refresh();
1331 |     }
1332 | 
1333 | 
1334 |     private void FilterInventoryByTreeView()
1335 |     {
1336 |         var selectedProductIds = ApplyFilter(treeView1, tvFilter1, tvIncludeChildren1);
1337 |         var selectedLocations = ApplyFilter(treeView2, tvFilter2, tvIncludeChildren2);
1338 |         var selectedCategoryIds = ApplyFilter(treeView3, tvFilter3, tvIncludeChildren3);
1339 |         // var bindingListView = new BindingListView<Inventory>(_cnx.Inventories.Local.ToList());
1340 | 
1341 |         if (selectedProductIds.Count == 0 && selectedLocations.Count == 0 && selectedCategoryIds.Count == 0)
1342 |         {
1343 |             InventoryBindingListView.RemoveFilter();
1344 |             UpdateButtonState(true);
1345 |         }
1346 |         else
1347 |         {
1348 |             InventoryBindingListView.ApplyFilter(i => selectedProductIds.Contains(i.ProductId)
1349 |                                                       || selectedLocations.Contains(i.LocationId)
1350 |                                                       || selectedCategoryIds.Contains(i.CategoryId));
1351 |             UpdateButtonState(false);
1352 |         }
1353 | 
1354 |         //bindingSource1.DataSource = _inventoryBindingListView;
1355 | 
1356 |         inventoryDataGridView.Refresh();
1357 |     }
1358 | 
1359 | 
1360 |     private HashSet<int> ApplyFilter(string searchString)
1361 |     {
1362 |         var filteredInventories = from i in Cnx.Inventories
1363 |                                   join p in Cnx.TreeNodeEntities on i.ProductId equals p.Id
1364 |                                   join l in Cnx.TreeNodeEntities on i.LocationId equals l.Id
1365 |                                   join c in Cnx.TreeNodeEntities on i.CategoryId equals c.Id
1366 |                                   where (i.Description != null && i.Description.Contains(searchString))
1367 |                                         || (i.Notes != null && i.Notes.Contains(searchString))
1368 |                                         || (p.Name != null && p.Name.Contains(searchString))
1369 |                                         || (l.Name != null && l.Name.Contains(searchString))
1370 |                                         || (c.Name != null && c.Name.Contains(searchString))
1371 |                                   select i;
1372 | 
1373 |         var ids = new HashSet<int>();
1374 | 
1375 |         foreach (var inventory in filteredInventories) ids.Add(inventory.InventoryId);
1376 | 
1377 |         return ids;
1378 |     }
1379 | 
1380 | 
1381 |     private static List<int> GetAllChildIds(TreeNode node)
1382 |     {
1383 |         var childIds = new List<int>();
1384 | 
1385 |         foreach (TreeNode childNode in node.Nodes)
1386 |         {
1387 |             var childTagData = (TreeNodeTagData)childNode.Tag;
1388 |             childIds.Add(childTagData.Id);
1389 | 
1390 |             // Recursively get the Ids of the grandchildren
1391 |             childIds.AddRange(GetAllChildIds(childNode));
1392 |         }
1393 | 
1394 |         return childIds;
1395 |     }
1396 | 
1397 |     private void InventoryDataGridView_CellClick(object sender, DataGridViewCellEventArgs e)
1398 |     {
1399 |     }
1400 | 
1401 |     private void AddNewRecord()
1402 |     {
1403 |         // Navigate to the last row (the new record row)
1404 |         inventoryDataGridView.CurrentCell = inventoryDataGridView.Rows[^1].Cells[4];
1405 | 
1406 |         inventoryDataGridView.Focus();
1407 |     }
1408 | 
1409 |     private void AddNew_Click(object sender, EventArgs e)
1410 |     {
1411 |         AddNewRecord();
1412 |     }
1413 | 
1414 | 
1415 |     private void InventoryDataGridView_DataError(object sender, DataGridViewDataErrorEventArgs e)
1416 |     {
1417 |     }
1418 | 
1419 |     [GeneratedRegex("TreeView", RegexOptions.IgnoreCase, "en-US")]
1420 |     private static partial Regex MyRegex();
1421 | 
1422 |     [GeneratedRegex("\\d+")]
1423 |     private static partial Regex MyRegex2();
1424 | 
1425 |     private void SearchInventory_Leave(object sender, EventArgs e)
1426 |     {
1427 |         FilterInventoryByText();
1428 |     }
1429 | 
1430 |     public class TreeNodeTagData
1431 |     {
1432 |         public TreeNodeEntity TreeNodeEntity { get; set; }
1433 |         public int Id { get; set; }
1434 |     }
1435 | }


--------------------------------------------------------------------------------
/Form1.resx:
--------------------------------------------------------------------------------
  1 | ﻿<?xml version="1.0" encoding="utf-8"?>
  2 | <root>
  3 |   <!--
  4 |     Microsoft ResX Schema 
  5 | 
  6 |     Version 2.0
  7 | 
  8 |     The primary goals of this format is to allow a simple XML format
  9 |     that is mostly human readable. The generation and parsing of the
 10 |     various data types are done through the TypeConverter classes
 11 |     associated with the data types.
 12 | 
 13 |     Example:
 14 | 
 15 |     ... ado.net/XML headers & schema ...
 16 |     <resheader name="resmimetype">text/microsoft-resx</resheader>
 17 |     <resheader name="version">2.0</resheader>
 18 |     <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
 19 |     <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
 20 |     <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
 21 |     <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
 22 |     <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
 23 |         <value>[base64 mime encoded serialized .NET Framework object]</value>
 24 |     </data>
 25 |     <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
 26 |         <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
 27 |         <comment>This is a comment</comment>
 28 |     </data>
 29 | 
 30 |     There are any number of "resheader" rows that contain simple
 31 |     name/value pairs.
 32 | 
 33 |     Each data row contains a name, and value. The row also contains a
 34 |     type or mimetype. Type corresponds to a .NET class that support
 35 |     text/value conversion through the TypeConverter architecture.
 36 |     Classes that don't support this are serialized and stored with the
 37 |     mimetype set.
 38 | 
 39 |     The mimetype is used for serialized objects, and tells the
 40 |     ResXResourceReader how to depersist the object. This is currently not
 41 |     extensible. For a given mimetype the value must be set accordingly:
 42 | 
 43 |     Note - application/x-microsoft.net.object.binary.base64 is the format
 44 |     that the ResXResourceWriter will generate, however the reader can
 45 |     read any of the formats listed below.
 46 | 
 47 |     mimetype: application/x-microsoft.net.object.binary.base64
 48 |     value   : The object must be serialized with
 49 |             : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
 50 |             : and then encoded with base64 encoding.
 51 |     
 52 |     mimetype: application/x-microsoft.net.object.soap.base64
 53 |     value   : The object must be serialized with
 54 |             : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
 55 |             : and then encoded with base64 encoding.
 56 | 
 57 |     mimetype: application/x-microsoft.net.object.bytearray.base64
 58 |     value   : The object must be serialized into a byte array
 59 |             : using a System.ComponentModel.TypeConverter
 60 |             : and then encoded with base64 encoding.
 61 |     -->
 62 |   <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
 63 |     <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
 64 |     <xsd:element name="root" msdata:IsDataSet="true">
 65 |       <xsd:complexType>
 66 |         <xsd:choice maxOccurs="unbounded">
 67 |           <xsd:element name="metadata">
 68 |             <xsd:complexType>
 69 |               <xsd:sequence>
 70 |                 <xsd:element name="value" type="xsd:string" minOccurs="0" />
 71 |               </xsd:sequence>
 72 |               <xsd:attribute name="name" use="required" type="xsd:string" />
 73 |               <xsd:attribute name="type" type="xsd:string" />
 74 |               <xsd:attribute name="mimetype" type="xsd:string" />
 75 |               <xsd:attribute ref="xml:space" />
 76 |             </xsd:complexType>
 77 |           </xsd:element>
 78 |           <xsd:element name="assembly">
 79 |             <xsd:complexType>
 80 |               <xsd:attribute name="alias" type="xsd:string" />
 81 |               <xsd:attribute name="name" type="xsd:string" />
 82 |             </xsd:complexType>
 83 |           </xsd:element>
 84 |           <xsd:element name="data">
 85 |             <xsd:complexType>
 86 |               <xsd:sequence>
 87 |                 <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
 88 |                 <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
 89 |               </xsd:sequence>
 90 |               <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
 91 |               <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
 92 |               <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
 93 |               <xsd:attribute ref="xml:space" />
 94 |             </xsd:complexType>
 95 |           </xsd:element>
 96 |           <xsd:element name="resheader">
 97 |             <xsd:complexType>
 98 |               <xsd:sequence>
 99 |                 <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
100 |               </xsd:sequence>
101 |               <xsd:attribute name="name" type="xsd:string" use="required" />
102 |             </xsd:complexType>
103 |           </xsd:element>
104 |         </xsd:choice>
105 |       </xsd:complexType>
106 |     </xsd:element>
107 |   </xsd:schema>
108 |   <resheader name="resmimetype">
109 |     <value>text/microsoft-resx</value>
110 |   </resheader>
111 |   <resheader name="version">
112 |     <value>2.0</value>
113 |   </resheader>
114 |   <resheader name="reader">
115 |     <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
116 |   </resheader>
117 |   <resheader name="writer">
118 |     <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
119 |   </resheader>
120 |   <metadata name="bindingSource1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
121 |     <value>17, 17</value>
122 |   </metadata>
123 |   <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
124 |     <value>25</value>
125 |   </metadata>
126 | </root>


--------------------------------------------------------------------------------
/Migrations/20240122192408_InitialCreate.Designer.cs:
--------------------------------------------------------------------------------
  1 | ﻿// <auto-generated />
  2 | using System;
  3 | using Microsoft.EntityFrameworkCore;
  4 | using Microsoft.EntityFrameworkCore.Infrastructure;
  5 | using Microsoft.EntityFrameworkCore.Metadata;
  6 | using Microsoft.EntityFrameworkCore.Migrations;
  7 | using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
  8 | using dave3.Model;
  9 | 
 10 | #nullable disable
 11 | 
 12 | namespace dave3.Migrations
 13 | {
 14 |     [DbContext(typeof(DelightfulContext))]
 15 |     [Migration("20240122192408_InitialCreate")]
 16 |     partial class InitialCreate
 17 |     {
 18 |         /// <inheritdoc />
 19 |         protected override void BuildTargetModel(ModelBuilder modelBuilder)
 20 |         {
 21 | #pragma warning disable 612, 618
 22 |             modelBuilder
 23 |                 .HasAnnotation("ProductVersion", "7.0.5")
 24 |                 .HasAnnotation("Relational:MaxIdentifierLength", 128);
 25 | 
 26 |             SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);
 27 | 
 28 |             modelBuilder.Entity("dave3.Model.Attribute", b =>
 29 |                 {
 30 |                     b.Property<int>("AttributeID")
 31 |                         .ValueGeneratedOnAdd()
 32 |                         .HasColumnType("int");
 33 | 
 34 |                     SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeID"));
 35 | 
 36 |                     b.Property<string>("AttributeName")
 37 |                         .HasColumnType("nvarchar(max)");
 38 | 
 39 |                     b.Property<float>("AttributeValue")
 40 |                         .HasColumnType("real");
 41 | 
 42 |                     b.HasKey("AttributeID");
 43 | 
 44 |                     b.HasIndex(new[] { "AttributeID" }, "IX_Attributes_AttributeID")
 45 |                         .IsUnique();
 46 | 
 47 |                     b.ToTable("Attributes");
 48 |                 });
 49 | 
 50 |             modelBuilder.Entity("dave3.Model.ControlObject", b =>
 51 |                 {
 52 |                     b.Property<string>("Name")
 53 |                         .HasColumnType("nvarchar(450)");
 54 | 
 55 |                     b.Property<float?>("ControlFloat")
 56 |                         .HasColumnType("real");
 57 | 
 58 |                     b.Property<int?>("ControlInt")
 59 |                         .HasColumnType("int");
 60 | 
 61 |                     b.Property<string>("ControlString")
 62 |                         .HasColumnType("nvarchar(max)");
 63 | 
 64 |                     b.HasKey("Name");
 65 | 
 66 |                     b.ToTable("ControlObjects");
 67 |                 });
 68 | 
 69 |             modelBuilder.Entity("dave3.Model.Inventory", b =>
 70 |                 {
 71 |                     b.Property<int>("InventoryId")
 72 |                         .ValueGeneratedOnAdd()
 73 |                         .HasColumnType("int");
 74 | 
 75 |                     SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));
 76 | 
 77 |                     b.Property<float?>("Amps")
 78 |                         .HasColumnType("real");
 79 | 
 80 |                     b.Property<int>("CategoryId")
 81 |                         .HasColumnType("int");
 82 | 
 83 |                     b.Property<string>("Description")
 84 |                         .HasColumnType("nvarchar(450)");
 85 | 
 86 |                     b.Property<float?>("Diameter")
 87 |                         .HasColumnType("real");
 88 | 
 89 |                     b.Property<float?>("Height")
 90 |                         .HasColumnType("real");
 91 | 
 92 |                     b.Property<DateTime>("LastUpdate")
 93 |                         .HasColumnType("datetime2");
 94 | 
 95 |                     b.Property<float?>("Length")
 96 |                         .HasColumnType("real");
 97 | 
 98 |                     b.Property<int>("LocationId")
 99 |                         .HasColumnType("int");
100 | 
101 |                     b.Property<string>("Material")
102 |                         .HasColumnType("nvarchar(max)");
103 | 
104 |                     b.Property<string>("Notes")
105 |                         .HasColumnType("nvarchar(max)");
106 | 
107 |                     b.Property<float?>("Pitch")
108 |                         .HasColumnType("real");
109 | 
110 |                     b.Property<int>("ProductId")
111 |                         .HasColumnType("int");
112 | 
113 |                     b.Property<int>("Quantity")
114 |                         .HasColumnType("int");
115 | 
116 |                     b.Property<string>("UoM")
117 |                         .HasColumnType("nvarchar(max)");
118 | 
119 |                     b.Property<float?>("Volts")
120 |                         .HasColumnType("real");
121 | 
122 |                     b.Property<float?>("Watts")
123 |                         .HasColumnType("real");
124 | 
125 |                     b.Property<float?>("Weight")
126 |                         .HasColumnType("real");
127 | 
128 |                     b.Property<float?>("Width")
129 |                         .HasColumnType("real");
130 | 
131 |                     b.HasKey("InventoryId");
132 | 
133 |                     b.HasIndex(new[] { "ProductId", "LocationId", "CategoryId", "Description" }, "IX_Inventories_ProductId_Location_Category_Desc")
134 |                         .IsUnique()
135 |                         .HasFilter("[Description] IS NOT NULL");
136 | 
137 |                     b.ToTable("Inventories");
138 |                 });
139 | 
140 |             modelBuilder.Entity("dave3.Model.InventoryView", b =>
141 |                 {
142 |                     b.Property<int>("ProductId")
143 |                         .HasColumnType("int");
144 | 
145 |                     b.Property<int>("Location")
146 |                         .HasColumnType("int");
147 | 
148 |                     b.Property<DateTime>("LastUpdate")
149 |                         .HasColumnType("datetime2");
150 | 
151 |                     b.Property<string>("LocationName")
152 |                         .IsRequired()
153 |                         .HasColumnType("nvarchar(max)");
154 | 
155 |                     b.Property<string>("Notes")
156 |                         .HasColumnType("nvarchar(max)");
157 | 
158 |                     b.Property<string>("ProductName")
159 |                         .IsRequired()
160 |                         .HasColumnType("nvarchar(max)");
161 | 
162 |                     b.Property<int>("Quantity")
163 |                         .HasColumnType("int");
164 | 
165 |                     b.HasKey("ProductId", "Location");
166 | 
167 |                     b.ToTable((string)null);
168 | 
169 |                     b.ToView("InventoryView", (string)null);
170 |                 });
171 | 
172 |             modelBuilder.Entity("dave3.Model.Node", b =>
173 |                 {
174 |                     b.Property<int>("Id")
175 |                         .ValueGeneratedOnAdd()
176 |                         .HasColumnType("int");
177 | 
178 |                     SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));
179 | 
180 |                     b.Property<int?>("NodeId")
181 |                         .HasColumnType("int");
182 | 
183 |                     b.Property<int?>("ParentId")
184 |                         .HasColumnType("int");
185 | 
186 |                     b.Property<string>("Text")
187 |                         .IsRequired()
188 |                         .HasColumnType("nvarchar(max)");
189 | 
190 |                     b.HasKey("Id");
191 | 
192 |                     b.HasIndex(new[] { "NodeId" }, "IX_Nodes_NodeId");
193 | 
194 |                     b.HasIndex(new[] { "ParentId" }, "IX_Nodes_ParentId");
195 | 
196 |                     b.ToTable("Nodes");
197 |                 });
198 | 
199 |             modelBuilder.Entity("dave3.Model.TreeNodeEntity", b =>
200 |                 {
201 |                     b.Property<int>("Id")
202 |                         .ValueGeneratedOnAdd()
203 |                         .HasColumnType("int");
204 | 
205 |                     SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));
206 | 
207 |                     b.Property<string>("Name")
208 |                         .IsRequired()
209 |                         .HasColumnType("nvarchar(max)");
210 | 
211 |                     b.Property<int>("Order")
212 |                         .HasColumnType("int");
213 | 
214 |                     b.Property<int?>("ParentId")
215 |                         .HasColumnType("int");
216 | 
217 |                     b.Property<int>("TreeId")
218 |                         .HasColumnType("int");
219 | 
220 |                     b.HasKey("Id");
221 | 
222 |                     b.HasIndex(new[] { "ParentId" }, "IX_TreeNodeEntities_ParentId");
223 | 
224 |                     b.ToTable("TreeNodeEntities");
225 |                 });
226 | 
227 |             modelBuilder.Entity("dave3.Model.Node", b =>
228 |                 {
229 |                     b.HasOne("dave3.Model.Node", "NodeNavigation")
230 |                         .WithMany("InverseNodeNavigation")
231 |                         .HasForeignKey("NodeId");
232 | 
233 |                     b.HasOne("dave3.Model.Node", "Parent")
234 |                         .WithMany("Children")
235 |                         .HasForeignKey("ParentId");
236 | 
237 |                     b.Navigation("NodeNavigation");
238 | 
239 |                     b.Navigation("Parent");
240 |                 });
241 | 
242 |             modelBuilder.Entity("dave3.Model.TreeNodeEntity", b =>
243 |                 {
244 |                     b.HasOne("dave3.Model.TreeNodeEntity", "Parent")
245 |                         .WithMany("Children")
246 |                         .HasForeignKey("ParentId");
247 | 
248 |                     b.Navigation("Parent");
249 |                 });
250 | 
251 |             modelBuilder.Entity("dave3.Model.Node", b =>
252 |                 {
253 |                     b.Navigation("Children");
254 | 
255 |                     b.Navigation("InverseNodeNavigation");
256 |                 });
257 | 
258 |             modelBuilder.Entity("dave3.Model.TreeNodeEntity", b =>
259 |                 {
260 |                     b.Navigation("Children");
261 |                 });
262 | #pragma warning restore 612, 618
263 |         }
264 |     }
265 | }
266 | 


--------------------------------------------------------------------------------
/Migrations/20240122192408_InitialCreate.cs:
--------------------------------------------------------------------------------
  1 | ﻿using Microsoft.EntityFrameworkCore.Migrations;
  2 | 
  3 | #nullable disable
  4 | 
  5 | namespace dave3.Migrations
  6 | {
  7 |     /// <inheritdoc />
  8 |     public partial class InitialCreate : Migration
  9 |     {
 10 |         /// <inheritdoc />
 11 |         protected override void Up(MigrationBuilder migrationBuilder)
 12 |         {
 13 |             migrationBuilder.CreateTable(
 14 |                 name: "Attributes",
 15 |                 columns: table => new
 16 |                 {
 17 |                     AttributeID = table.Column<int>(type: "int", nullable: false)
 18 |                         .Annotation("SqlServer:Identity", "1, 1"),
 19 |                     AttributeName = table.Column<string>(type: "nvarchar(max)", nullable: true),
 20 |                     AttributeValue = table.Column<float>(type: "real", nullable: false)
 21 |                 },
 22 |                 constraints: table =>
 23 |                 {
 24 |                     table.PrimaryKey("PK_Attributes", x => x.AttributeID);
 25 |                 });
 26 | 
 27 |             migrationBuilder.CreateTable(
 28 |                 name: "ControlObjects",
 29 |                 columns: table => new
 30 |                 {
 31 |                     Name = table.Column<string>(type: "nvarchar(450)", nullable: false),
 32 |                     ControlString = table.Column<string>(type: "nvarchar(max)", nullable: true),
 33 |                     ControlInt = table.Column<int>(type: "int", nullable: true),
 34 |                     ControlFloat = table.Column<float>(type: "real", nullable: true)
 35 |                 },
 36 |                 constraints: table =>
 37 |                 {
 38 |                     table.PrimaryKey("PK_ControlObjects", x => x.Name);
 39 |                 });
 40 | 
 41 |             migrationBuilder.CreateTable(
 42 |                 name: "Inventories",
 43 |                 columns: table => new
 44 |                 {
 45 |                     InventoryId = table.Column<int>(type: "int", nullable: false)
 46 |                         .Annotation("SqlServer:Identity", "1, 1"),
 47 |                     ProductId = table.Column<int>(type: "int", nullable: false),
 48 |                     LocationId = table.Column<int>(type: "int", nullable: false),
 49 |                     CategoryId = table.Column<int>(type: "int", nullable: false),
 50 |                     LastUpdate = table.Column<DateTime>(type: "datetime2", nullable: false),
 51 |                     Description = table.Column<string>(type: "nvarchar(450)", nullable: true),
 52 |                     Quantity = table.Column<int>(type: "int", nullable: false),
 53 |                     Material = table.Column<string>(type: "nvarchar(max)", nullable: true),
 54 |                     Weight = table.Column<float>(type: "real", nullable: true),
 55 |                     UoM = table.Column<string>(type: "nvarchar(max)", nullable: true),
 56 |                     Length = table.Column<float>(type: "real", nullable: true),
 57 |                     Width = table.Column<float>(type: "real", nullable: true),
 58 |                     Height = table.Column<float>(type: "real", nullable: true),
 59 |                     Diameter = table.Column<float>(type: "real", nullable: true),
 60 |                     Pitch = table.Column<float>(type: "real", nullable: true),
 61 |                     Volts = table.Column<float>(type: "real", nullable: true),
 62 |                     Amps = table.Column<float>(type: "real", nullable: true),
 63 |                     Watts = table.Column<float>(type: "real", nullable: true),
 64 |                     Notes = table.Column<string>(type: "nvarchar(max)", nullable: true)
 65 |                 },
 66 |                 constraints: table =>
 67 |                 {
 68 |                     table.PrimaryKey("PK_Inventories", x => x.InventoryId);
 69 |                 });
 70 | 
 71 |             migrationBuilder.CreateTable(
 72 |                 name: "Nodes",
 73 |                 columns: table => new
 74 |                 {
 75 |                     Id = table.Column<int>(type: "int", nullable: false)
 76 |                         .Annotation("SqlServer:Identity", "1, 1"),
 77 |                     Text = table.Column<string>(type: "nvarchar(max)", nullable: false),
 78 |                     ParentId = table.Column<int>(type: "int", nullable: true),
 79 |                     NodeId = table.Column<int>(type: "int", nullable: true)
 80 |                 },
 81 |                 constraints: table =>
 82 |                 {
 83 |                     table.PrimaryKey("PK_Nodes", x => x.Id);
 84 |                     table.ForeignKey(
 85 |                         name: "FK_Nodes_Nodes_NodeId",
 86 |                         column: x => x.NodeId,
 87 |                         principalTable: "Nodes",
 88 |                         principalColumn: "Id");
 89 |                     table.ForeignKey(
 90 |                         name: "FK_Nodes_Nodes_ParentId",
 91 |                         column: x => x.ParentId,
 92 |                         principalTable: "Nodes",
 93 |                         principalColumn: "Id");
 94 |                 });
 95 | 
 96 |             migrationBuilder.CreateTable(
 97 |                 name: "TreeNodeEntities",
 98 |                 columns: table => new
 99 |                 {
100 |                     Id = table.Column<int>(type: "int", nullable: false)
101 |                         .Annotation("SqlServer:Identity", "1, 1"),
102 |                     TreeId = table.Column<int>(type: "int", nullable: false),
103 |                     Order = table.Column<int>(type: "int", nullable: false),
104 |                     Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
105 |                     ParentId = table.Column<int>(type: "int", nullable: true)
106 |                 },
107 |                 constraints: table =>
108 |                 {
109 |                     table.PrimaryKey("PK_TreeNodeEntities", x => x.Id);
110 |                     table.ForeignKey(
111 |                         name: "FK_TreeNodeEntities_TreeNodeEntities_ParentId",
112 |                         column: x => x.ParentId,
113 |                         principalTable: "TreeNodeEntities",
114 |                         principalColumn: "Id");
115 |                 });
116 | 
117 |             migrationBuilder.CreateIndex(
118 |                 name: "IX_Attributes_AttributeID",
119 |                 table: "Attributes",
120 |                 column: "AttributeID",
121 |                 unique: true);
122 | 
123 |             migrationBuilder.CreateIndex(
124 |                 name: "IX_Inventories_ProductId_Location_Category_Desc",
125 |                 table: "Inventories",
126 |                 columns: new[] { "ProductId", "LocationId", "CategoryId", "Description" },
127 |                 unique: true,
128 |                 filter: "[Description] IS NOT NULL");
129 | 
130 |             migrationBuilder.CreateIndex(
131 |                 name: "IX_Nodes_NodeId",
132 |                 table: "Nodes",
133 |                 column: "NodeId");
134 | 
135 |             migrationBuilder.CreateIndex(
136 |                 name: "IX_Nodes_ParentId",
137 |                 table: "Nodes",
138 |                 column: "ParentId");
139 | 
140 |             migrationBuilder.CreateIndex(
141 |                 name: "IX_TreeNodeEntities_ParentId",
142 |                 table: "TreeNodeEntities",
143 |                 column: "ParentId");
144 |         }
145 | 
146 |         /// <inheritdoc />
147 |         protected override void Down(MigrationBuilder migrationBuilder)
148 |         {
149 |             migrationBuilder.DropTable(
150 |                 name: "Attributes");
151 | 
152 |             migrationBuilder.DropTable(
153 |                 name: "ControlObjects");
154 | 
155 |             migrationBuilder.DropTable(
156 |                 name: "Inventories");
157 | 
158 |             migrationBuilder.DropTable(
159 |                 name: "Nodes");
160 | 
161 |             migrationBuilder.DropTable(
162 |                 name: "TreeNodeEntities");
163 |         }
164 |     }
165 | }
166 | 


--------------------------------------------------------------------------------
/Migrations/DelightfulContextModelSnapshot.cs:
--------------------------------------------------------------------------------
  1 | ﻿// <auto-generated />
  2 | using System;
  3 | using Microsoft.EntityFrameworkCore;
  4 | using Microsoft.EntityFrameworkCore.Infrastructure;
  5 | using Microsoft.EntityFrameworkCore.Metadata;
  6 | using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
  7 | using dave3.Model;
  8 | 
  9 | #nullable disable
 10 | 
 11 | namespace dave3.Migrations
 12 | {
 13 |     [DbContext(typeof(DelightfulContext))]
 14 |     partial class DelightfulContextModelSnapshot : ModelSnapshot
 15 |     {
 16 |         protected override void BuildModel(ModelBuilder modelBuilder)
 17 |         {
 18 | #pragma warning disable 612, 618
 19 |             modelBuilder
 20 |                 .HasAnnotation("ProductVersion", "8.0.2")
 21 |                 .HasAnnotation("Relational:MaxIdentifierLength", 128);
 22 | 
 23 |             SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);
 24 | 
 25 |             modelBuilder.Entity("dave3.Model.Attribute", b =>
 26 |                 {
 27 |                     b.Property<int>("AttributeID")
 28 |                         .ValueGeneratedOnAdd()
 29 |                         .HasColumnType("int");
 30 | 
 31 |                     SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeID"));
 32 | 
 33 |                     b.Property<string>("AttributeName")
 34 |                         .HasColumnType("nvarchar(max)");
 35 | 
 36 |                     b.Property<float>("AttributeValue")
 37 |                         .HasColumnType("real");
 38 | 
 39 |                     b.HasKey("AttributeID");
 40 | 
 41 |                     b.HasIndex(new[] { "AttributeID" }, "IX_Attributes_AttributeID")
 42 |                         .IsUnique();
 43 | 
 44 |                     b.ToTable("Attributes");
 45 |                 });
 46 | 
 47 |             modelBuilder.Entity("dave3.Model.ControlObject", b =>
 48 |                 {
 49 |                     b.Property<string>("Name")
 50 |                         .HasColumnType("nvarchar(450)");
 51 | 
 52 |                     b.Property<float?>("ControlFloat")
 53 |                         .HasColumnType("real");
 54 | 
 55 |                     b.Property<int?>("ControlInt")
 56 |                         .HasColumnType("int");
 57 | 
 58 |                     b.Property<string>("ControlString")
 59 |                         .HasColumnType("nvarchar(max)");
 60 | 
 61 |                     b.HasKey("Name");
 62 | 
 63 |                     b.ToTable("ControlObjects");
 64 |                 });
 65 | 
 66 |             modelBuilder.Entity("dave3.Model.Inventory", b =>
 67 |                 {
 68 |                     b.Property<int>("Id")
 69 |                         .ValueGeneratedOnAdd()
 70 |                         .HasColumnType("int");
 71 | 
 72 |                     SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));
 73 | 
 74 |                     b.Property<float?>("Amps")
 75 |                         .HasColumnType("real");
 76 | 
 77 |                     b.Property<int>("CategoryId")
 78 |                         .HasColumnType("int");
 79 | 
 80 |                     b.Property<string>("Description")
 81 |                         .HasColumnType("nvarchar(450)");
 82 | 
 83 |                     b.Property<float?>("Diameter")
 84 |                         .HasColumnType("real");
 85 | 
 86 |                     b.Property<float?>("Height")
 87 |                         .HasColumnType("real");
 88 | 
 89 |                     b.Property<int>("InventoryId")
 90 |                         .HasColumnType("int");
 91 | 
 92 |                     b.Property<DateTime>("LastUpdate")
 93 |                         .HasColumnType("datetime2");
 94 | 
 95 |                     b.Property<float?>("Length")
 96 |                         .HasColumnType("real");
 97 | 
 98 |                     b.Property<int>("LocationId")
 99 |                         .HasColumnType("int");
100 | 
101 |                     b.Property<string>("Material")
102 |                         .HasColumnType("nvarchar(max)");
103 | 
104 |                     b.Property<string>("Notes")
105 |                         .HasColumnType("nvarchar(max)");
106 | 
107 |                     b.Property<float?>("Pitch")
108 |                         .HasColumnType("real");
109 | 
110 |                     b.Property<int>("ProductId")
111 |                         .HasColumnType("int");
112 | 
113 |                     b.Property<int>("Quantity")
114 |                         .HasColumnType("int");
115 | 
116 |                     b.Property<string>("UoM")
117 |                         .HasColumnType("nvarchar(max)");
118 | 
119 |                     b.Property<float?>("Volts")
120 |                         .HasColumnType("real");
121 | 
122 |                     b.Property<float?>("Watts")
123 |                         .HasColumnType("real");
124 | 
125 |                     b.Property<float?>("Weight")
126 |                         .HasColumnType("real");
127 | 
128 |                     b.Property<float?>("Width")
129 |                         .HasColumnType("real");
130 | 
131 |                     b.HasKey("Id");
132 | 
133 |                     b.HasIndex(new[] { "ProductId", "LocationId", "CategoryId", "Description" }, "IX_Inventories_ProductId_Location_Category_Desc")
134 |                         .IsUnique()
135 |                         .HasFilter("[Description] IS NOT NULL");
136 | 
137 |                     b.ToTable("Inventories");
138 |                 });
139 | 
140 |             modelBuilder.Entity("dave3.Model.InventoryView", b =>
141 |                 {
142 |                     b.Property<int>("ProductId")
143 |                         .HasColumnType("int");
144 | 
145 |                     b.Property<int>("Location")
146 |                         .HasColumnType("int");
147 | 
148 |                     b.Property<DateTime>("LastUpdate")
149 |                         .HasColumnType("datetime2");
150 | 
151 |                     b.Property<string>("LocationName")
152 |                         .IsRequired()
153 |                         .HasColumnType("nvarchar(max)");
154 | 
155 |                     b.Property<string>("Notes")
156 |                         .HasColumnType("nvarchar(max)");
157 | 
158 |                     b.Property<string>("ProductName")
159 |                         .IsRequired()
160 |                         .HasColumnType("nvarchar(max)");
161 | 
162 |                     b.Property<int>("Quantity")
163 |                         .HasColumnType("int");
164 | 
165 |                     b.HasKey("ProductId", "Location");
166 | 
167 |                     b.ToTable((string)null);
168 | 
169 |                     b.ToView("InventoryView", (string)null);
170 |                 });
171 | 
172 |             modelBuilder.Entity("dave3.Model.Node", b =>
173 |                 {
174 |                     b.Property<int>("Id")
175 |                         .ValueGeneratedOnAdd()
176 |                         .HasColumnType("int");
177 | 
178 |                     SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));
179 | 
180 |                     b.Property<int?>("NodeId")
181 |                         .HasColumnType("int");
182 | 
183 |                     b.Property<int?>("ParentId")
184 |                         .HasColumnType("int");
185 | 
186 |                     b.Property<string>("Text")
187 |                         .IsRequired()
188 |                         .HasColumnType("nvarchar(max)");
189 | 
190 |                     b.HasKey("Id");
191 | 
192 |                     b.HasIndex(new[] { "NodeId" }, "IX_Nodes_NodeId");
193 | 
194 |                     b.HasIndex(new[] { "ParentId" }, "IX_Nodes_ParentId");
195 | 
196 |                     b.ToTable("Nodes");
197 |                 });
198 | 
199 |             modelBuilder.Entity("dave3.Model.TreeNodeEntity", b =>
200 |                 {
201 |                     b.Property<int>("Id")
202 |                         .ValueGeneratedOnAdd()
203 |                         .HasColumnType("int");
204 | 
205 |                     SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));
206 | 
207 |                     b.Property<string>("Name")
208 |                         .IsRequired()
209 |                         .HasColumnType("nvarchar(max)");
210 | 
211 |                     b.Property<int>("Order")
212 |                         .HasColumnType("int");
213 | 
214 |                     b.Property<int?>("ParentId")
215 |                         .HasColumnType("int");
216 | 
217 |                     b.Property<int>("TreeId")
218 |                         .HasColumnType("int");
219 | 
220 |                     b.HasKey("Id");
221 | 
222 |                     b.HasIndex(new[] { "ParentId" }, "IX_TreeNodeEntities_ParentId");
223 | 
224 |                     b.ToTable("TreeNodeEntities");
225 |                 });
226 | 
227 |             modelBuilder.Entity("dave3.Model.Node", b =>
228 |                 {
229 |                     b.HasOne("dave3.Model.Node", "NodeNavigation")
230 |                         .WithMany("InverseNodeNavigation")
231 |                         .HasForeignKey("NodeId");
232 | 
233 |                     b.HasOne("dave3.Model.Node", "Parent")
234 |                         .WithMany("Children")
235 |                         .HasForeignKey("ParentId");
236 | 
237 |                     b.Navigation("NodeNavigation");
238 | 
239 |                     b.Navigation("Parent");
240 |                 });
241 | 
242 |             modelBuilder.Entity("dave3.Model.TreeNodeEntity", b =>
243 |                 {
244 |                     b.HasOne("dave3.Model.TreeNodeEntity", "Parent")
245 |                         .WithMany("Children")
246 |                         .HasForeignKey("ParentId");
247 | 
248 |                     b.Navigation("Parent");
249 |                 });
250 | 
251 |             modelBuilder.Entity("dave3.Model.Node", b =>
252 |                 {
253 |                     b.Navigation("Children");
254 | 
255 |                     b.Navigation("InverseNodeNavigation");
256 |                 });
257 | 
258 |             modelBuilder.Entity("dave3.Model.TreeNodeEntity", b =>
259 |                 {
260 |                     b.Navigation("Children");
261 |                 });
262 | #pragma warning restore 612, 618
263 |         }
264 |     }
265 | }
266 | 


--------------------------------------------------------------------------------
/Model/Attribute.cs:
--------------------------------------------------------------------------------
 1 | ﻿namespace dave3.Model;
 2 | 
 3 | public partial class Attribute
 4 | {
 5 |     public int AttributeID { get; set; }
 6 | 
 7 |     public string AttributeName { get; set; }
 8 | 
 9 |     public float AttributeValue { get; set; }
10 | 
11 | 
12 | }
13 | 


--------------------------------------------------------------------------------
/Model/ControlObject.cs:
--------------------------------------------------------------------------------
 1 | ﻿#nullable enable
 2 | namespace dave3.Model
 3 | {
 4 |     public class ControlObject
 5 |     {
 6 | 
 7 |         public string Name { get; set; }
 8 |         public string? ControlString { get; set; }
 9 |         public int? ControlInt { get; set; }
10 |         public float? ControlFloat { get; set; }
11 |     }
12 | }
13 | 


--------------------------------------------------------------------------------
/Model/DelightfulContext.cs:
--------------------------------------------------------------------------------
  1 | ﻿using EntityFramework.Exceptions.SqlServer;
  2 | using Microsoft.EntityFrameworkCore;
  3 | using System.Configuration;
  4 | 
  5 | 
  6 | namespace dave3.Model;
  7 | 
  8 | public partial class DelightfulContext : DbContext
  9 | {
 10 | 
 11 |     private readonly string _connectionString;
 12 | 
 13 |     //public DelightfulContext(string connectionString)
 14 |     //{
 15 |     //    _connectionString = connectionString;
 16 |     //}
 17 | 
 18 |     // rest of the class implementation
 19 | 
 20 | 
 21 | 
 22 | 
 23 | 
 24 |     public DelightfulContext()
 25 |     {
 26 |         _connectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
 27 |     }
 28 | 
 29 |     //public DelightfulContext(DbContextOptions<DelightfulContext> options)
 30 |     //    : base(options)
 31 |     //{
 32 |     //}
 33 | 
 34 |     public virtual DbSet<Inventory> Inventories { get; set; }
 35 | 
 36 |     public virtual DbSet<InventoryView> InventoryViews { get; set; }
 37 | 
 38 |     public virtual DbSet<Node> Nodes { get; set; }
 39 | 
 40 |     public virtual DbSet<TreeNodeEntity> TreeNodeEntities { get; set; }
 41 | 
 42 |     public virtual DbSet<Attribute> Attributes { get; set; }
 43 | 
 44 |     public virtual DbSet<ControlObject> ControlObjects { get; set; }
 45 | 
 46 |     protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
 47 |         =>
 48 |             optionsBuilder
 49 |                 .UseSqlServer(_connectionString)
 50 |                 .UseExceptionProcessor()
 51 |             ;
 52 | 
 53 |     protected override void OnModelCreating(ModelBuilder modelBuilder)
 54 |     {
 55 |         modelBuilder.Entity<Inventory>(entity =>
 56 |         {
 57 |             entity.HasIndex(e => new { e.ProductId, Location = e.LocationId, e.CategoryId, e.Description },
 58 |                 "IX_Inventories_ProductId_Location_Category_Desc").IsUnique();
 59 |         });
 60 |         modelBuilder.Entity<ControlObject>(entity =>
 61 |         {
 62 |             entity.HasKey(e => e.Name);
 63 |         });
 64 | 
 65 | 
 66 |         // modelBuilder.Entity<InventoryView>(entity =>
 67 |         // {
 68 |         //     entity
 69 |         //         .HasNoKey()
 70 |         //         .ToView("InventoryView");
 71 |         // });
 72 | 
 73 |         modelBuilder.Entity<Attribute>(entity =>
 74 |         {
 75 |             entity.HasIndex(e => e.AttributeID, "IX_Attributes_AttributeID").IsUnique();
 76 |         });
 77 | 
 78 |         modelBuilder.Entity<InventoryView>(entity =>
 79 |         {
 80 |             entity
 81 |                 .ToView("InventoryView");
 82 | 
 83 |             entity
 84 |                 .HasKey(e => new { e.ProductId, e.Location });
 85 |         });
 86 | 
 87 | 
 88 |         modelBuilder.Entity<Node>(entity =>
 89 |         {
 90 |             entity.HasIndex(e => e.NodeId, "IX_Nodes_NodeId");
 91 | 
 92 |             entity.HasIndex(e => e.ParentId, "IX_Nodes_ParentId");
 93 | 
 94 |             entity.HasOne(d => d.NodeNavigation).WithMany(p => p.InverseNodeNavigation).HasForeignKey(d => d.NodeId);
 95 | 
 96 |             entity.HasOne(d => d.Parent).WithMany(p => p.Children).HasForeignKey(d => d.ParentId);
 97 |         });
 98 | 
 99 |         modelBuilder.Entity<TreeNodeEntity>(entity =>
100 |         {
101 |             entity.HasIndex(e => e.ParentId, "IX_TreeNodeEntities_ParentId");
102 | 
103 |             entity.HasOne(d => d.Parent).WithMany(p => p.Children).HasForeignKey(d => d.ParentId);
104 |         });
105 | 
106 |         OnModelCreatingPartial(modelBuilder);
107 |     }
108 | 
109 |     partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
110 | }


--------------------------------------------------------------------------------
/Model/Inventory.cs:
--------------------------------------------------------------------------------
 1 | ﻿#nullable enable
 2 | using System.ComponentModel.DataAnnotations;
 3 | using System.ComponentModel.DataAnnotations.Schema;
 4 | 
 5 | namespace dave3.Model;
 6 | 
 7 | public class Inventory
 8 | {
 9 |     // [Key]
10 |     //[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
11 |     //public int Id { get; set; }
12 | 
13 | public Inventory() { } // Parameterless constructor
14 | 
15 |     public Inventory(string productName, string locationName, string categoryName)
16 |     {
17 |         ProductName = productName;
18 |         LocationName = locationName;
19 |         CategoryName = categoryName;
20 |     }
21 | 
22 | 
23 |     public int ProductId { get; set; }
24 | 
25 | 
26 |     public int LocationId { get; set; }
27 | 
28 |     public int CategoryId { get; set; }
29 | 
30 |     public DateTime LastUpdate { get; set; }
31 |     public string? Description { get; set; }
32 |     public int Quantity { get; set; }
33 |     public string? Material { get; set; }
34 |     public float? Weight { get; set; }
35 |     public string? UoM { get; set; }
36 |     public float? Length { get; set; }
37 |     public float? Width { get; set; }
38 |     public float? Height { get; set; }
39 |     public float? Diameter { get; set; }
40 |     public float? Pitch { get; set; }
41 |     public float? Volts { get; set; }
42 |     public float? Amps { get; set; }
43 |     public float? Watts { get; set; }
44 | 
45 | 
46 |     public string? Notes { get; set; }
47 | 
48 |     public int InventoryId { get; set; }
49 | 
50 | 
51 |     [NotMapped] public string? ProductName { get; set; }
52 | 
53 |     [NotMapped] public string? LocationName { get; set; }
54 | 
55 |     [NotMapped] public string? CategoryName { get; set; }
56 | }


--------------------------------------------------------------------------------
/Model/InventoryView.cs:
--------------------------------------------------------------------------------
 1 | ﻿#nullable enable
 2 | namespace dave3.Model;
 3 | 
 4 | public partial class InventoryView
 5 | {
 6 |     public int ProductId { get; set; }
 7 | 
 8 |     public int Quantity { get; set; }
 9 | 
10 |     public int Location { get; set; }
11 | 
12 |     public DateTime LastUpdate { get; set; }
13 | 
14 |     public string? Notes { get; set; }
15 | 
16 |     public string ProductName { get; set; } = null!;
17 | 
18 |     public string LocationName { get; set; } = null!;
19 | }
20 | 


--------------------------------------------------------------------------------
/Model/Node.cs:
--------------------------------------------------------------------------------
 1 | ﻿#nullable enable
 2 | namespace dave3.Model;
 3 | 
 4 | public partial class Node
 5 | {
 6 |     public int Id { get; set; }
 7 | 
 8 |     public string Text { get; set; } = null!;
 9 | 
10 |     public int? ParentId { get; set; }
11 | 
12 |     public int? NodeId { get; set; }
13 | 
14 |     public virtual ICollection<Node> InverseNodeNavigation { get; set; } = new List<Node>();
15 | 
16 |     public virtual ICollection<Node> Children { get; set; } = new List<Node>();
17 | 
18 |     public virtual Node? NodeNavigation { get; set; }
19 | 
20 |     public virtual Node? Parent { get; set; }
21 | }
22 | 


--------------------------------------------------------------------------------
/Model/TreeNodeEntity.cs:
--------------------------------------------------------------------------------
 1 | ﻿#nullable enable
 2 | namespace dave3.Model;
 3 | 
 4 | public partial class TreeNodeEntity
 5 | {
 6 |     public int Id { get; set; }
 7 | 
 8 |     public int TreeId { get; set; }
 9 | 
10 |     public int Order { get; set; }
11 | 
12 |     public string Name { get; set; } = null!;
13 | 
14 |     public int? ParentId { get; set; }
15 | 
16 |     public virtual ICollection<TreeNodeEntity> Children { get; set; } = new List<TreeNodeEntity>();
17 | 
18 |     public virtual TreeNodeEntity? Parent { get; set; }
19 | }
20 | 


--------------------------------------------------------------------------------
/MyTreeView.cs:
--------------------------------------------------------------------------------
 1 | ﻿using System.ComponentModel;
 2 | using System.Runtime.InteropServices;
 3 | 
 4 | namespace dave3
 5 | {
 6 |     public class MyTreeView : TreeView
 7 |     {
 8 |         public MyTreeView()
 9 |         {
10 |             this.HideSelection = false;
11 |         }
12 | 
13 |         protected override void OnHandleCreated(EventArgs e)
14 |         {
15 |             base.OnHandleCreated(e);
16 |             SendMessage(this.Handle, TVM_SETEXTENDEDSTYLE, (IntPtr)TVS_EX_DOUBLEBUFFER, (IntPtr)TVS_EX_DOUBLEBUFFER);
17 |         }
18 | 
19 |         private const int TVM_SETEXTENDEDSTYLE = 0x1100 + 44;
20 |         private const int TVS_EX_DOUBLEBUFFER = 0x0004;
21 | 
22 |         [DllImport("user32.dll")]
23 |         private static extern IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wp, IntPtr lp);
24 |     }
25 |     public class CustomTextBox : TextBox
26 |     {
27 |         public override string Text
28 |         {
29 |             get
30 |             {
31 |                 return base.Text;
32 |             }
33 |             set
34 |             {
35 |                 // Place a breakpoint here to break when the Text property changes
36 |                 base.Text = value;
37 |             }
38 |         }
39 |     }
40 | 
41 | 
42 | 
43 |     public class FilterClass : INotifyPropertyChanged
44 |     {
45 |         private bool _filterStat;
46 | 
47 |         public bool FilterStat
48 |         {
49 |             get { return _filterStat; }
50 |             set
51 |             {
52 |                 if (_filterStat != value)
53 |                 {
54 |                     _filterStat = value;
55 |                     OnPropertyChanged("FilterStat");
56 |                 }
57 |             }
58 |         }
59 | 
60 |         public event PropertyChangedEventHandler PropertyChanged;
61 | 
62 |         protected virtual void OnPropertyChanged(string propertyName)
63 |         {
64 |             PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
65 |         }
66 |     }
67 | 
68 | 
69 | }
70 | 


--------------------------------------------------------------------------------
/Program.cs:
--------------------------------------------------------------------------------
 1 | namespace dave3;
 2 | 
 3 | static class Program
 4 | {
 5 |     /// <summary>
 6 |     ///  The main entry point for the application.
 7 |     /// </summary>
 8 |     [STAThread]
 9 |     static void Main()
10 |     {
11 |         // To customize application configuration such as set high DPI settings or default font,
12 |         // see https://aka.ms/applicationconfiguration.
13 |         ApplicationConfiguration.Initialize();
14 |         Application.Run(new Form1());
15 |     }
16 | }


--------------------------------------------------------------------------------
/Properties/DataSources/dave3.Model.Inventory.datasource:
--------------------------------------------------------------------------------
 1 | ﻿<?xml version="1.0" encoding="utf-8"?>
 2 | <!--
 3 |     This file is automatically generated by Visual Studio. It is 
 4 |     used to store generic object data source configuration information.  
 5 |     Renaming the file extension or editing the content of this file may   
 6 |     cause the file to be unrecognizable by the program.
 7 | -->
 8 | <GenericObjectDataSource DisplayName="Inventory" Version="1.0" xmlns="urn:schemas-microsoft-com:xml-msdatasource">
 9 |   <TypeInfo>dave3.Model.Inventory, dave3, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</TypeInfo>
10 | </GenericObjectDataSource>


--------------------------------------------------------------------------------
/Properties/Resources.Designer.cs:
--------------------------------------------------------------------------------
 1 | ﻿//------------------------------------------------------------------------------
 2 | // <auto-generated>
 3 | //     This code was generated by a tool.
 4 | //     Runtime Version:4.0.30319.42000
 5 | //
 6 | //     Changes to this file may cause incorrect behavior and will be lost if
 7 | //     the code is regenerated.
 8 | // </auto-generated>
 9 | //------------------------------------------------------------------------------
10 | 
11 | namespace dave3.Properties {
12 |     using System;
13 |     
14 |     
15 |     /// <summary>
16 |     ///   A strongly-typed resource class, for looking up localized strings, etc.
17 |     /// </summary>
18 |     // This class was auto-generated by the StronglyTypedResourceBuilder
19 |     // class via a tool like ResGen or Visual Studio.
20 |     // To add or remove a member, edit your .ResX file then rerun ResGen
21 |     // with the /str option, or rebuild your VS project.
22 |     [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
23 |     [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
24 |     [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
25 |     internal class Resources {
26 |         
27 |         private static global::System.Resources.ResourceManager resourceMan;
28 |         
29 |         private static global::System.Globalization.CultureInfo resourceCulture;
30 |         
31 |         [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
32 |         internal Resources() {
33 |         }
34 |         
35 |         /// <summary>
36 |         ///   Returns the cached ResourceManager instance used by this class.
37 |         /// </summary>
38 |         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
39 |         internal static global::System.Resources.ResourceManager ResourceManager {
40 |             get {
41 |                 if (object.ReferenceEquals(resourceMan, null)) {
42 |                     global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("dave3.Properties.Resources", typeof(Resources).Assembly);
43 |                     resourceMan = temp;
44 |                 }
45 |                 return resourceMan;
46 |             }
47 |         }
48 |         
49 |         /// <summary>
50 |         ///   Overrides the current thread's CurrentUICulture property for all
51 |         ///   resource lookups using this strongly typed resource class.
52 |         /// </summary>
53 |         [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
54 |         internal static global::System.Globalization.CultureInfo Culture {
55 |             get {
56 |                 return resourceCulture;
57 |             }
58 |             set {
59 |                 resourceCulture = value;
60 |             }
61 |         }
62 |     }
63 | }
64 | 


--------------------------------------------------------------------------------
/Properties/Resources.resx:
--------------------------------------------------------------------------------
  1 | ﻿<?xml version="1.0" encoding="utf-8"?>
  2 | <root>
  3 | 	<!-- 
  4 | 		Microsoft ResX Schema
  5 | 
  6 | 		Version 1.3
  7 | 
  8 | 		The primary goals of this format is to allow a simple XML format 
  9 | 		that is mostly human readable. The generation and parsing of the 
 10 | 		various data types are done through the TypeConverter classes 
 11 | 		associated with the data types.
 12 | 
 13 | 		Example:
 14 | 
 15 | 		... ado.net/XML headers & schema ...
 16 | 		<resheader name="resmimetype">text/microsoft-resx</resheader>
 17 | 		<resheader name="version">1.3</resheader>
 18 | 		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
 19 | 		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
 20 | 		<data name="Name1">this is my long string</data>
 21 | 		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
 22 | 		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
 23 | 			[base64 mime encoded serialized .NET Framework object]
 24 | 		</data>
 25 | 		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
 26 | 			[base64 mime encoded string representing a byte array form of the .NET Framework object]
 27 | 		</data>
 28 | 
 29 | 		There are any number of "resheader" rows that contain simple 
 30 | 		name/value pairs.
 31 | 
 32 | 		Each data row contains a name, and value. The row also contains a 
 33 | 		type or mimetype. Type corresponds to a .NET class that support 
 34 | 		text/value conversion through the TypeConverter architecture. 
 35 | 		Classes that don't support this are serialized and stored with the 
 36 | 		mimetype set.
 37 | 
 38 | 		The mimetype is used for serialized objects, and tells the 
 39 | 		ResXResourceReader how to depersist the object. This is currently not 
 40 | 		extensible. For a given mimetype the value must be set accordingly:
 41 | 
 42 | 		Note - application/x-microsoft.net.object.binary.base64 is the format 
 43 | 		that the ResXResourceWriter will generate, however the reader can 
 44 | 		read any of the formats listed below.
 45 | 
 46 | 		mimetype: application/x-microsoft.net.object.binary.base64
 47 | 		value   : The object must be serialized with 
 48 | 			: System.Serialization.Formatters.Binary.BinaryFormatter
 49 | 			: and then encoded with base64 encoding.
 50 | 
 51 | 		mimetype: application/x-microsoft.net.object.soap.base64
 52 | 		value   : The object must be serialized with 
 53 | 			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
 54 | 			: and then encoded with base64 encoding.
 55 | 
 56 | 		mimetype: application/x-microsoft.net.object.bytearray.base64
 57 | 		value   : The object must be serialized into a byte array 
 58 | 			: using a System.ComponentModel.TypeConverter
 59 | 			: and then encoded with base64 encoding.
 60 | 	-->
 61 | 	
 62 | 	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
 63 | 		<xsd:element name="root" msdata:IsDataSet="true">
 64 | 			<xsd:complexType>
 65 | 				<xsd:choice maxOccurs="unbounded">
 66 | 					<xsd:element name="data">
 67 | 						<xsd:complexType>
 68 | 							<xsd:sequence>
 69 | 								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
 70 | 								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
 71 | 							</xsd:sequence>
 72 | 							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
 73 | 							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
 74 | 							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
 75 | 						</xsd:complexType>
 76 | 					</xsd:element>
 77 | 					<xsd:element name="resheader">
 78 | 						<xsd:complexType>
 79 | 							<xsd:sequence>
 80 | 								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
 81 | 							</xsd:sequence>
 82 | 							<xsd:attribute name="name" type="xsd:string" use="required" />
 83 | 						</xsd:complexType>
 84 | 					</xsd:element>
 85 | 				</xsd:choice>
 86 | 			</xsd:complexType>
 87 | 		</xsd:element>
 88 | 	</xsd:schema>
 89 | 	<resheader name="resmimetype">
 90 | 		<value>text/microsoft-resx</value>
 91 | 	</resheader>
 92 | 	<resheader name="version">
 93 | 		<value>1.3</value>
 94 | 	</resheader>
 95 | 	<resheader name="reader">
 96 | 		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
 97 | 	</resheader>
 98 | 	<resheader name="writer">
 99 | 		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
100 | 	</resheader>
101 | </root>


--------------------------------------------------------------------------------
/Properties/Settings.Designer.cs:
--------------------------------------------------------------------------------
 1 | ﻿//------------------------------------------------------------------------------
 2 | // <auto-generated>
 3 | //     This code was generated by a tool.
 4 | //     Runtime Version:4.0.30319.42000
 5 | //
 6 | //     Changes to this file may cause incorrect behavior and will be lost if
 7 | //     the code is regenerated.
 8 | // </auto-generated>
 9 | //------------------------------------------------------------------------------
10 | 
11 | namespace dave3.Properties {
12 |     
13 |     
14 |     [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
15 |     [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.6.0.0")]
16 |     internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
17 |         
18 |         private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
19 |         
20 |         public static Settings Default {
21 |             get {
22 |                 return defaultInstance;
23 |             }
24 |         }
25 |         
26 |         [global::System.Configuration.UserScopedSettingAttribute()]
27 |         [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
28 |         [global::System.Configuration.DefaultSettingValueAttribute("Server=192.168.1.205;Database=delightful;User Id=dave;Password=asdf;TrustServerCe" +
29 |             "rtificate=True")]
30 |         public string DefaultConnection {
31 |             get {
32 |                 return ((string)(this["DefaultConnection"]));
33 |             }
34 |             set {
35 |                 this["DefaultConnection"] = value;
36 |             }
37 |         }
38 |     }
39 | }
40 | 


--------------------------------------------------------------------------------
/Properties/Settings.settings:
--------------------------------------------------------------------------------
1 | ﻿<?xml version='1.0' encoding='utf-8'?>
2 | <SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" GeneratedClassNamespace="dave3.Properties" GeneratedClassName="Settings">
3 |   <Profiles />
4 |   <Settings>
5 |     <Setting Name="DefaultConnection" Type="System.String" Scope="User">
6 |       <Value Profile="(Default)">Server=192.168.68.67;Database=delightful;User Id=dave;Password=asdf;TrustServerCertificate=True</Value>
7 |     </Setting>
8 |   </Settings>
9 | </SettingsFile>


--------------------------------------------------------------------------------
/README.md:
--------------------------------------------------------------------------------
1 | It's an app. We'll expand on it later!
2 | 


--------------------------------------------------------------------------------
/Services/InventtoryRepository.cs:
--------------------------------------------------------------------------------
 1 | ﻿using Microsoft.EntityFrameworkCore;
 2 | using System.Collections.Generic;
 3 | using System.Linq;
 4 | using System.Threading.Tasks;
 5 | using dave3.Model;  // Your namespace
 6 | 
 7 | public class InventoryRepository
 8 | {
 9 |     private readonly DelightfulContext _context;
10 | 
11 |     public InventoryRepository(DelightfulContext context)
12 |     {
13 |         _context = context;
14 |     }
15 | 
16 |     public async Task<List<Inventory>> GetFilteredInventoryAsync(int? productId, int? locationId, int? categoryId, bool includeChildren)
17 |     {
18 |         var query = _context.Inventory.AsQueryable();
19 |         if (productId.HasValue) query = query.Where(i => i.ProductId == productId.Value);  // Add child logic if needed
20 |         // Similar for location/category
21 |         return await query.ToListAsync();
22 |     }
23 | 
24 |     public async Task SaveChangesAsync()
25 |     {
26 |         await _context.SaveChangesAsync();
27 |     }
28 | }


--------------------------------------------------------------------------------
/[MAKE_A_COPY]_Anthropic_API_Quickstart.ipynb:
--------------------------------------------------------------------------------
  1 | {
  2 |   "nbformat": 4,
  3 |   "nbformat_minor": 0,
  4 |   "metadata": {
  5 |     "colab": {
  6 |       "provenance": [],
  7 |       "toc_visible": true,
  8 |       "include_colab_link": true
  9 |     },
 10 |     "kernelspec": {
 11 |       "name": "python3",
 12 |       "display_name": "Python 3"
 13 |     },
 14 |     "language_info": {
 15 |       "name": "python"
 16 |     }
 17 |   },
 18 |   "cells": [
 19 |     {
 20 |       "cell_type": "markdown",
 21 |       "metadata": {
 22 |         "id": "view-in-github",
 23 |         "colab_type": "text"
 24 |       },
 25 |       "source": [
 26 |         "<a href=\"https://colab.research.google.com/github/dchristal/dave3/blob/master/%5BMAKE_A_COPY%5D_Anthropic_API_Quickstart.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
 27 |       ]
 28 |     },
 29 |     {
 30 |       "cell_type": "markdown",
 31 |       "source": [
 32 |         "# Anthropic API Quickstart\n",
 33 |         "\n",
 34 |         "Make a copy of this notebook to start testing Claude through the API using the [Anthropic Python SDK](https://github.com/anthropics/anthropic-sdk-python).\n"
 35 |       ],
 36 |       "metadata": {
 37 |         "id": "i_ZcF24WBGNh"
 38 |       }
 39 |     },
 40 |     {
 41 |       "cell_type": "markdown",
 42 |       "source": [
 43 |         "Run the cell below by clicking on the ▶ play button on the left of the cell."
 44 |       ],
 45 |       "metadata": {
 46 |         "id": "KiGuPJu6nQ2m"
 47 |       }
 48 |     },
 49 |     {
 50 |       "cell_type": "code",
 51 |       "execution_count": 4,
 52 |       "metadata": {
 53 |         "id": "lKmLRu9p_6f6",
 54 |         "outputId": "d4d02bf4-1803-41ba-ea3f-fe112a30b596",
 55 |         "colab": {
 56 |           "base_uri": "https://localhost:8080/"
 57 |         }
 58 |       },
 59 |       "outputs": [
 60 |         {
 61 |           "output_type": "stream",
 62 |           "name": "stdout",
 63 |           "text": [
 64 |             "Requirement already satisfied: anthropic in /usr/local/lib/python3.10/dist-packages (0.25.6)\n",
 65 |             "Requirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.10/dist-packages (from anthropic) (3.7.1)\n",
 66 |             "Requirement already satisfied: distro<2,>=1.7.0 in /usr/lib/python3/dist-packages (from anthropic) (1.7.0)\n",
 67 |             "Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from anthropic) (0.27.0)\n",
 68 |             "Requirement already satisfied: pydantic<3,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from anthropic) (2.7.0)\n",
 69 |             "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from anthropic) (1.3.1)\n",
 70 |             "Requirement already satisfied: tokenizers>=0.13.0 in /usr/local/lib/python3.10/dist-packages (from anthropic) (0.19.1)\n",
 71 |             "Requirement already satisfied: typing-extensions<5,>=4.7 in /usr/local/lib/python3.10/dist-packages (from anthropic) (4.11.0)\n",
 72 |             "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->anthropic) (3.7)\n",
 73 |             "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->anthropic) (1.2.1)\n",
 74 |             "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->anthropic) (2024.2.2)\n",
 75 |             "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->anthropic) (1.0.5)\n",
 76 |             "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->anthropic) (0.14.0)\n",
 77 |             "Requirement already satisfied: annotated-types>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.9.0->anthropic) (0.6.0)\n",
 78 |             "Requirement already satisfied: pydantic-core==2.18.1 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.9.0->anthropic) (2.18.1)\n",
 79 |             "Requirement already satisfied: huggingface-hub<1.0,>=0.16.4 in /usr/local/lib/python3.10/dist-packages (from tokenizers>=0.13.0->anthropic) (0.20.3)\n",
 80 |             "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.16.4->tokenizers>=0.13.0->anthropic) (3.13.4)\n",
 81 |             "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.16.4->tokenizers>=0.13.0->anthropic) (2023.6.0)\n",
 82 |             "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.16.4->tokenizers>=0.13.0->anthropic) (2.31.0)\n",
 83 |             "Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.16.4->tokenizers>=0.13.0->anthropic) (4.66.2)\n",
 84 |             "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.16.4->tokenizers>=0.13.0->anthropic) (6.0.1)\n",
 85 |             "Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.16.4->tokenizers>=0.13.0->anthropic) (24.0)\n",
 86 |             "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub<1.0,>=0.16.4->tokenizers>=0.13.0->anthropic) (3.3.2)\n",
 87 |             "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub<1.0,>=0.16.4->tokenizers>=0.13.0->anthropic) (2.0.7)\n"
 88 |           ]
 89 |         }
 90 |       ],
 91 |       "source": [
 92 |         "%pip install anthropic"
 93 |       ]
 94 |     },
 95 |     {
 96 |       "cell_type": "markdown",
 97 |       "source": [
 98 |         "Enter your API key in the `api_key` variable field in the cell below. You can then edit the `Hi Claude.` user prompt or the `Respond in pirate speak.` system prompt to content of your own. If you do not want a system prompt, simply delete that whole parameter.\n",
 99 |         "\n",
100 |         "Then click on the ▶ play button on the left of the cell to run the prompt.Claude's response will appear below the cell."
101 |       ],
102 |       "metadata": {
103 |         "id": "Go5lIfr8zyPp"
104 |       }
105 |     },
106 |     {
107 |       "cell_type": "code",
108 |       "source": [
109 |         "import anthropic\n",
110 |         "\n",
111 |         "client = anthropic.Anthropic(\n",
112 |         "    api_key=\"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\",\n",
113 |         ")\n",
114 |         "message = client.messages.create(\n",
115 |         "    model=\"claude-3-sonnet-20240229\",\n",
116 |         "    max_tokens=1000,\n",
117 |         "    temperature=0,\n",
118 |         "    system=\"Respond only in pirate speak.\",\n",
119 |         "    messages=[\n",
120 |         "        {\"role\": \"user\", \"content\": \"Hi Claude.\"}\n",
121 |         "    ]\n",
122 |         ")\n",
123 |         "print(message.content)"
124 |       ],
125 |       "metadata": {
126 |         "id": "dds-bswdAish",
127 |         "outputId": "0253d208-1e7c-45dd-844a-91be54f42ba4",
128 |         "colab": {
129 |           "base_uri": "https://localhost:8080/"
130 |         }
131 |       },
132 |       "execution_count": 5,
133 |       "outputs": [
134 |         {
135 |           "output_type": "stream",
136 |           "name": "stdout",
137 |           "text": [
138 |             "[TextBlock(text=\"Ahoy matey! 'Tis a fine day to be sailin' the high seas o' conversation, isn't it? What winds be blowin' ye way on this voyage?\", type='text')]\n"
139 |           ]
140 |         }
141 |       ]
142 |     }
143 |   ]
144 | }


--------------------------------------------------------------------------------
/dave3.csproj:
--------------------------------------------------------------------------------
 1 | ﻿<Project Sdk="Microsoft.NET.Sdk">
 2 | 
 3 |   <PropertyGroup>
 4 |     <OutputType>WinExe</OutputType>
 5 |     <TargetFramework>net8.0-windows7.0</TargetFramework>
 6 |     <NoWarn>$(NoWarn);NU1701</NoWarn>
 7 |     <Nullable>disable</Nullable>
 8 |     <UseWindowsForms>True</UseWindowsForms>
 9 |     <ImplicitUsings>enable</ImplicitUsings>
10 |     <IncludeSymbols>False</IncludeSymbols>
11 |     <UserSecretsId>2b5dc417-2590-4971-9391-3042e6b56b0b</UserSecretsId>
12 |   </PropertyGroup>
13 | 
14 |   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
15 |     <Optimize>False</Optimize>
16 |   </PropertyGroup>
17 | 
18 |   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
19 |     <Optimize>False</Optimize>
20 |   </PropertyGroup>
21 | 
22 |   <ItemGroup>
23 |     <PackageReference Include="EntityFrameworkCore.Exceptions.SqlServer" Version="8.0.0.2" />
24 |     <PackageReference Include="Equin.ApplicationFramework.BindingListView" Version="1.4.5222.35545" />
25 |     <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.2" />
26 |     <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.2" />
27 |     <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.2">
28 |       <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
29 |       <PrivateAssets>all</PrivateAssets>
30 |     </PackageReference>
31 |     <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
32 |   </ItemGroup>
33 | 
34 |   <ItemGroup>
35 |     <Folder Include="Migrations\" />
36 |   </ItemGroup>
37 | 
38 |   <ItemGroup>
39 |     <Compile Update="Properties\Resources.Designer.cs">
40 |       <DesignTime>True</DesignTime>
41 |       <AutoGen>True</AutoGen>
42 |       <DependentUpon>Resources.resx</DependentUpon>
43 |     </Compile>
44 |     <Compile Update="Properties\Settings.Designer.cs">
45 |       <DesignTimeSharedInput>True</DesignTimeSharedInput>
46 |       <AutoGen>True</AutoGen>
47 |       <DependentUpon>Settings.settings</DependentUpon>
48 |     </Compile>
49 |   </ItemGroup>
50 | 
51 |   <ItemGroup>
52 |     <EmbeddedResource Update="Properties\Resources.resx">
53 |       <Generator>ResXFileCodeGenerator</Generator>
54 |       <LastGenOutput>Resources.Designer.cs</LastGenOutput>
55 |     </EmbeddedResource>
56 |   </ItemGroup>
57 | 
58 |   <ItemGroup>
59 |     <None Update="Properties\Settings.settings">
60 |       <Generator>SettingsSingleFileGenerator</Generator>
61 |       <LastGenOutput>Settings.Designer.cs</LastGenOutput>
62 |     </None>
63 |   </ItemGroup>
64 | 
65 | </Project>


--------------------------------------------------------------------------------
/dave3.sln:
--------------------------------------------------------------------------------
 1 | ﻿
 2 | Microsoft Visual Studio Solution File, Format Version 12.00
 3 | # Visual Studio Version 17
 4 | VisualStudioVersion = 17.6.33723.286
 5 | MinimumVisualStudioVersion = 10.0.40219.1
 6 | Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "dave3", "dave3.csproj", "{26C33C56-81A2-4959-84B5-FC53EA341F0E}"
 7 | EndProject
 8 | Global
 9 | 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
10 | 		Debug|Any CPU = Debug|Any CPU
11 | 		Release|Any CPU = Release|Any CPU
12 | 	EndGlobalSection
13 | 	GlobalSection(ProjectConfigurationPlatforms) = postSolution
14 | 		{26C33C56-81A2-4959-84B5-FC53EA341F0E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
15 | 		{26C33C56-81A2-4959-84B5-FC53EA341F0E}.Debug|Any CPU.Build.0 = Debug|Any CPU
16 | 		{26C33C56-81A2-4959-84B5-FC53EA341F0E}.Release|Any CPU.ActiveCfg = Release|Any CPU
17 | 		{26C33C56-81A2-4959-84B5-FC53EA341F0E}.Release|Any CPU.Build.0 = Release|Any CPU
18 | 	EndGlobalSection
19 | 	GlobalSection(SolutionProperties) = preSolution
20 | 		HideSolutionNode = FALSE
21 | 	EndGlobalSection
22 | 	GlobalSection(ExtensibilityGlobals) = postSolution
23 | 		SolutionGuid = {95D43D8B-6DBC-4BCF-B72B-381F2C4BFD10}
24 | 	EndGlobalSection
25 | EndGlobal
26 | 


--------------------------------------------------------------------------------
/dbcontextShtuff.txt:
--------------------------------------------------------------------------------
 1 | Scaffold-DbContext "Server=(local)\mssqllocaldb;Database=delightful;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Tables InventoryView
 2 | 
 3 | Scaffold-DbContext "Data Source=(local);Integrated Security=SSPI;Initial Catalog=delightful;MultipleActiveResultSets=true;Encrypt=true;TrustServerCertificate=true" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Model -Tables InventoryView, Inventories, Nodes, TreeNodeEntities -Force
 4 | 
 5 | 
 6 | Scaffold-DbContext "YourConnectionString" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Model -Tables YourTableList -Force
 7 | 
 8 | Scaffold-DbContext "Data Source=(local);Integrated Security=SSPI;Initial Catalog=delightful;MultipleActiveResultSets=true;Encrypt=true;TrustServerCertificate=true" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Model -Tables TreeNodeEntities -Force
 9 | 
10 | Add-Migration AddCategoryID
11 | Update-Database
12 | 
13 | 2do
14 | ensure that treeview checkboxes work after global text search
15 | unset treeview checkboxes when running global text search
16 | 


--------------------------------------------------------------------------------
 Add to README

Other Tools
API

